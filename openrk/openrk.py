# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openrk', [dirname(__file__)])
        except ImportError:
            import _openrk
            return _openrk
        if fp is not None:
            try:
                _mod = imp.load_module('_openrk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openrk = swig_import_helper()
    del swig_import_helper
else:
    import _openrk
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def eigenvalueSolve(A, M, flux, old_source, new_source, flux_temp, ng, cx, cy, tol):
    return _openrk.eigenvalueSolve(A, M, flux, old_source, new_source, flux_temp, ng, cx, cy, tol)
eigenvalueSolve = _openrk.eigenvalueSolve

def eigenvalueSolve2d(A, A1, A2, M, M1, M2, flux, old_source, new_source, flux_temp, ng, cx, cy, cz, tol):
    return _openrk.eigenvalueSolve2d(A, A1, A2, M, M1, M2, flux, old_source, new_source, flux_temp, ng, cx, cy, cz, tol)
eigenvalueSolve2d = _openrk.eigenvalueSolve2d

def linearSolve(A, flux, source, flux_temp, cx, cy, ng, tol):
    return _openrk.linearSolve(A, flux, source, flux_temp, cx, cy, ng, tol)
linearSolve = _openrk.linearSolve

def linearSolve2d(A, A1, A2, flux, source, flux_temp, cx, cy, cz, ng, tol):
    return _openrk.linearSolve2d(A, A1, A2, flux, source, flux_temp, cx, cy, cz, ng, tol)
linearSolve2d = _openrk.linearSolve2d

def matrix_multiplication(matrix, vector_x, vector_y, num_blocks, block_width):
    return _openrk.matrix_multiplication(matrix, vector_x, vector_y, num_blocks, block_width)
matrix_multiplication = _openrk.matrix_multiplication

def matrix_multiplication2d(matrix, vector_x, vector_y, num_blocks, block_width):
    return _openrk.matrix_multiplication2d(matrix, vector_x, vector_y, num_blocks, block_width)
matrix_multiplication2d = _openrk.matrix_multiplication2d

def vector_scale(vector, scale_value, length):
    return _openrk.vector_scale(vector, scale_value, length)
vector_scale = _openrk.vector_scale

def setNumThreads(num_threads):
    return _openrk.setNumThreads(num_threads)
setNumThreads = _openrk.setNumThreads

_openrk.DEBUG_swigconstant(_openrk)
DEBUG = _openrk.DEBUG

_openrk.INFO_swigconstant(_openrk)
INFO = _openrk.INFO

_openrk.NORMAL_swigconstant(_openrk)
NORMAL = _openrk.NORMAL

_openrk.SEPARATOR_swigconstant(_openrk)
SEPARATOR = _openrk.SEPARATOR

_openrk.HEADER_swigconstant(_openrk)
HEADER = _openrk.HEADER

_openrk.TITLE_swigconstant(_openrk)
TITLE = _openrk.TITLE

_openrk.WARNING_swigconstant(_openrk)
WARNING = _openrk.WARNING

_openrk.CRITICAL_swigconstant(_openrk)
CRITICAL = _openrk.CRITICAL

_openrk.RESULT_swigconstant(_openrk)
RESULT = _openrk.RESULT

_openrk.UNITTEST_swigconstant(_openrk)
UNITTEST = _openrk.UNITTEST

_openrk.ERROR_swigconstant(_openrk)
ERROR = _openrk.ERROR

def set_err(msg):
    return _openrk.set_err(msg)
set_err = _openrk.set_err

def set_output_directory(directory):
    return _openrk.set_output_directory(directory)
set_output_directory = _openrk.set_output_directory

def get_output_directory():
    return _openrk.get_output_directory()
get_output_directory = _openrk.get_output_directory

def set_log_filename(filename):
    return _openrk.set_log_filename(filename)
set_log_filename = _openrk.set_log_filename

def get_log_filename():
    return _openrk.get_log_filename()
get_log_filename = _openrk.get_log_filename

def set_separator_character(c):
    return _openrk.set_separator_character(c)
set_separator_character = _openrk.set_separator_character

def get_separator_character():
    return _openrk.get_separator_character()
get_separator_character = _openrk.get_separator_character

def set_header_character(c):
    return _openrk.set_header_character(c)
set_header_character = _openrk.set_header_character

def get_header_character():
    return _openrk.get_header_character()
get_header_character = _openrk.get_header_character

def set_title_character(c):
    return _openrk.set_title_character(c)
set_title_character = _openrk.set_title_character

def get_title_character():
    return _openrk.get_title_character()
get_title_character = _openrk.get_title_character

def set_line_length(length):
    return _openrk.set_line_length(length)
set_line_length = _openrk.set_line_length

def set_log_level(new_level):
    return _openrk.set_log_level(new_level)
set_log_level = _openrk.set_log_level

def get_log_level():
    return _openrk.get_log_level()
get_log_level = _openrk.get_log_level

def log_printf(level, format):
    return _openrk.log_printf(level, format)
log_printf = _openrk.log_printf

def create_multiline_msg(level, message):
    return _openrk.create_multiline_msg(level, message)
create_multiline_msg = _openrk.create_multiline_msg

_openrk.START_swigconstant(_openrk)
START = _openrk.START

_openrk.PREVIOUS_OUT_swigconstant(_openrk)
PREVIOUS_OUT = _openrk.PREVIOUS_OUT

_openrk.PREVIOUS_IN_swigconstant(_openrk)
PREVIOUS_IN = _openrk.PREVIOUS_IN

_openrk.CURRENT_swigconstant(_openrk)
CURRENT = _openrk.CURRENT

_openrk.FORWARD_IN_OLD_swigconstant(_openrk)
FORWARD_IN_OLD = _openrk.FORWARD_IN_OLD

_openrk.FORWARD_OUT_swigconstant(_openrk)
FORWARD_OUT = _openrk.FORWARD_OUT

_openrk.FORWARD_OUT_OLD_swigconstant(_openrk)
FORWARD_OUT_OLD = _openrk.FORWARD_OUT_OLD

_openrk.END_swigconstant(_openrk)
END = _openrk.END
class Clock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clock, name)
    __repr__ = _swig_repr

    def __init__(self, start_time=0.0, end_time=3.0, dt_outer=1.e-1, dt_inner=1.e-2):
        this = _openrk.new_Clock(start_time, end_time, dt_outer, dt_inner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Clock
    __del__ = lambda self: None

    def getTime(self, position):
        return _openrk.Clock_getTime(self, position)

    def getDtInner(self):
        return _openrk.Clock_getDtInner(self)

    def getDtOuter(self):
        return _openrk.Clock_getDtOuter(self)

    def getPositionName(self, position):
        return _openrk.Clock_getPositionName(self, position)

    def setDtOuter(self, dt_outer):
        return _openrk.Clock_setDtOuter(self, dt_outer)

    def setDtInner(self, dt_inner):
        return _openrk.Clock_setDtInner(self, dt_inner)

    def setTime(self, position, time):
        return _openrk.Clock_setTime(self, position, time)

    def setStartTime(self, time):
        return _openrk.Clock_setStartTime(self, time)

    def setEndTime(self, time):
        return _openrk.Clock_setEndTime(self, time)

    def takeInnerStep(self):
        return _openrk.Clock_takeInnerStep(self)

    def takeOuterStep(self):
        return _openrk.Clock_takeOuterStep(self)

    def resetToPreviousOuterStep(self):
        return _openrk.Clock_resetToPreviousOuterStep(self)

    def toString(self):
        return _openrk.Clock_toString(self)

    def printString(self):
        return _openrk.Clock_printString(self)
Clock_swigregister = _openrk.Clock_swigregister
Clock_swigregister(Clock)


def material_id():
    return _openrk.material_id()
material_id = _openrk.material_id
class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr

    def __init__(self, id=0):
        this = _openrk.new_Material(id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Material
    __del__ = lambda self: None

    def setNumEnergyGroups(self, num_groups):
        return _openrk.Material_setNumEnergyGroups(self, num_groups)

    def setNumDelayedGroups(self, num_groups):
        return _openrk.Material_setNumDelayedGroups(self, num_groups)

    def setEnergyPerFission(self, energy_per_fission):
        return _openrk.Material_setEnergyPerFission(self, energy_per_fission)

    def setSigmaT(self, xs):
        return _openrk.Material_setSigmaT(self, xs)

    def setSigmaA(self, xs):
        return _openrk.Material_setSigmaA(self, xs)

    def setSigmaS(self, xs):
        return _openrk.Material_setSigmaS(self, xs)

    def setSigmaF(self, xs):
        return _openrk.Material_setSigmaF(self, xs)

    def setNuSigmaF(self, xs):
        return _openrk.Material_setNuSigmaF(self, xs)

    def setChi(self, xs):
        return _openrk.Material_setChi(self, xs)

    def setDifCoef(self, xs):
        return _openrk.Material_setDifCoef(self, xs)

    def setVelocity(self, xs):
        return _openrk.Material_setVelocity(self, xs)

    def setPrecursorConc(self, xs):
        return _openrk.Material_setPrecursorConc(self, xs)

    def setSigmaTByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setSigmaTByGroup(self, xs, group, position)

    def setSigmaAByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setSigmaAByGroup(self, xs, group, position)

    def setSigmaFByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setSigmaFByGroup(self, xs, group, position)

    def setNuSigmaFByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setNuSigmaFByGroup(self, xs, group, position)

    def setSigmaSByGroup(self, xs, group_from, group_to, position=CURRENT):
        return _openrk.Material_setSigmaSByGroup(self, xs, group_from, group_to, position)

    def setChiByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setChiByGroup(self, xs, group, position)

    def setDifCoefByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setDifCoefByGroup(self, xs, group, position)

    def setVelocityByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setVelocityByGroup(self, xs, group, position)

    def setPrecursorConcByGroup(self, xs, group, position=CURRENT):
        return _openrk.Material_setPrecursorConcByGroup(self, xs, group, position)

    def setTemperatureConversionFactor(self, conversion_factor):
        return _openrk.Material_setTemperatureConversionFactor(self, conversion_factor)

    def setClock(self, clock):
        return _openrk.Material_setClock(self, clock)

    def getId(self):
        return _openrk.Material_getId(self)

    def getNumEnergyGroups(self):
        return _openrk.Material_getNumEnergyGroups(self)

    def getNumDelayedGroups(self):
        return _openrk.Material_getNumDelayedGroups(self)

    def getEnergyPerFission(self):
        return _openrk.Material_getEnergyPerFission(self)

    def getSigmaT(self):
        return _openrk.Material_getSigmaT(self)

    def getSigmaA(self):
        return _openrk.Material_getSigmaA(self)

    def getSigmaS(self):
        return _openrk.Material_getSigmaS(self)

    def getSigmaF(self):
        return _openrk.Material_getSigmaF(self)

    def getNuSigmaF(self):
        return _openrk.Material_getNuSigmaF(self)

    def getChi(self):
        return _openrk.Material_getChi(self)

    def getDifCoef(self):
        return _openrk.Material_getDifCoef(self)

    def getVelocity(self):
        return _openrk.Material_getVelocity(self)

    def getPrecursorConc(self):
        return _openrk.Material_getPrecursorConc(self)

    def getSigmaTByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getSigmaTByGroup(self, group, position, temp)

    def getSigmaAByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getSigmaAByGroup(self, group, position, temp)

    def getSigmaSByGroup(self, group_from, group_to, position=CURRENT, temp=0.0):
        return _openrk.Material_getSigmaSByGroup(self, group_from, group_to, position, temp)

    def getSigmaFByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getSigmaFByGroup(self, group, position, temp)

    def getNuSigmaFByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getNuSigmaFByGroup(self, group, position, temp)

    def getChiByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getChiByGroup(self, group, position, temp)

    def getDifCoefByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getDifCoefByGroup(self, group, position, temp)

    def getVelocityByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getVelocityByGroup(self, group, position, temp)

    def getPrecursorConcByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.Material_getPrecursorConcByGroup(self, group, position, temp)

    def getTemperatureConversionFactor(self):
        return _openrk.Material_getTemperatureConversionFactor(self)

    def isFissionable(self):
        return _openrk.Material_isFissionable(self)

    def toString(self):
        return _openrk.Material_toString(self)

    def printString(self):
        return _openrk.Material_printString(self)

    def clone(self):
        return _openrk.Material_clone(self)

    def copy(self, position_from, position_to):
        return _openrk.Material_copy(self, position_from, position_to)
Material_swigregister = _openrk.Material_swigregister
Material_swigregister(Material)

class FunctionalMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionalMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionalMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, id=0):
        this = _openrk.new_FunctionalMaterial(id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_FunctionalMaterial
    __del__ = lambda self: None

    def setNumEnergyGroups(self, num_groups):
        return _openrk.FunctionalMaterial_setNumEnergyGroups(self, num_groups)

    def setTimeSteps(self, time_steps):
        return _openrk.FunctionalMaterial_setTimeSteps(self, time_steps)

    def setSigmaT(self, xs):
        return _openrk.FunctionalMaterial_setSigmaT(self, xs)

    def setSigmaA(self, xs):
        return _openrk.FunctionalMaterial_setSigmaA(self, xs)

    def setSigmaS(self, xs):
        return _openrk.FunctionalMaterial_setSigmaS(self, xs)

    def setSigmaF(self, xs):
        return _openrk.FunctionalMaterial_setSigmaF(self, xs)

    def setNuSigmaF(self, xs):
        return _openrk.FunctionalMaterial_setNuSigmaF(self, xs)

    def setChi(self, xs):
        return _openrk.FunctionalMaterial_setChi(self, xs)

    def setDifCoef(self, xs):
        return _openrk.FunctionalMaterial_setDifCoef(self, xs)

    def setVelocity(self, xs):
        return _openrk.FunctionalMaterial_setVelocity(self, xs)

    def setDopplerCoefficients(self, xs):
        return _openrk.FunctionalMaterial_setDopplerCoefficients(self, xs)

    def setSigmaTByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setSigmaTByGroup(self, xs, group, position)

    def setSigmaAByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setSigmaAByGroup(self, xs, group, position)

    def setSigmaFByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setSigmaFByGroup(self, xs, group, position)

    def setNuSigmaFByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setNuSigmaFByGroup(self, xs, group, position)

    def setSigmaSByGroup(self, xs, group_from, group_to, position=CURRENT):
        return _openrk.FunctionalMaterial_setSigmaSByGroup(self, xs, group_from, group_to, position)

    def setChiByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setChiByGroup(self, xs, group, position)

    def setDifCoefByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setDifCoefByGroup(self, xs, group, position)

    def setVelocityByGroup(self, xs, group, position=CURRENT):
        return _openrk.FunctionalMaterial_setVelocityByGroup(self, xs, group, position)

    def getSigmaTByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getSigmaTByGroup(self, group, position, temp)

    def getSigmaAByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getSigmaAByGroup(self, group, position, temp)

    def getSigmaSByGroup(self, group_from, group_to, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getSigmaSByGroup(self, group_from, group_to, position, temp)

    def getSigmaFByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getSigmaFByGroup(self, group, position, temp)

    def getNuSigmaFByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getNuSigmaFByGroup(self, group, position, temp)

    def getChiByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getChiByGroup(self, group, position, temp)

    def getDifCoefByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getDifCoefByGroup(self, group, position, temp)

    def getVelocityByGroup(self, group, position=CURRENT, temp=0.0):
        return _openrk.FunctionalMaterial_getVelocityByGroup(self, group, position, temp)

    def getDopplerCoefficientByGroup(self, group):
        return _openrk.FunctionalMaterial_getDopplerCoefficientByGroup(self, group)

    def getTimeStep(self, position):
        return _openrk.FunctionalMaterial_getTimeStep(self, position)

    def toString(self):
        return _openrk.FunctionalMaterial_toString(self)

    def clone(self):
        return _openrk.FunctionalMaterial_clone(self)

    def copy(self, position_from, position_to):
        return _openrk.FunctionalMaterial_copy(self, position_from, position_to)
FunctionalMaterial_swigregister = _openrk.FunctionalMaterial_swigregister
FunctionalMaterial_swigregister(FunctionalMaterial)


_openrk.REFLECTIVE_swigconstant(_openrk)
REFLECTIVE = _openrk.REFLECTIVE

_openrk.VACUUM_swigconstant(_openrk)
VACUUM = _openrk.VACUUM
class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def __init__(self, width=1.0, height=1.0, depth=1.0):
        this = _openrk.new_Mesh(width, height, depth)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Mesh
    __del__ = lambda self: None

    def setNumShapeEnergyGroups(self, num_groups):
        return _openrk.Mesh_setNumShapeEnergyGroups(self, num_groups)

    def setNumAmpEnergyGroups(self, num_groups):
        return _openrk.Mesh_setNumAmpEnergyGroups(self, num_groups)

    def setNumDelayedGroups(self, num_groups):
        return _openrk.Mesh_setNumDelayedGroups(self, num_groups)

    def setXMin(self, x_min):
        return _openrk.Mesh_setXMin(self, x_min)

    def setXMax(self, x_max):
        return _openrk.Mesh_setXMax(self, x_max)

    def setYMin(self, y_min):
        return _openrk.Mesh_setYMin(self, y_min)

    def setYMax(self, y_max):
        return _openrk.Mesh_setYMax(self, y_max)

    def setZMin(self, z_min):
        return _openrk.Mesh_setZMin(self, z_min)

    def setZMax(self, z_max):
        return _openrk.Mesh_setZMax(self, z_max)

    def setKeff0(self, k_eff_0):
        return _openrk.Mesh_setKeff0(self, k_eff_0)

    def setBoundary(self, side, boundary):
        return _openrk.Mesh_setBoundary(self, side, boundary)

    def setMaterial(self, material, cell):
        return _openrk.Mesh_setMaterial(self, material, cell)

    def setBuckling(self, buckling):
        return _openrk.Mesh_setBuckling(self, buckling)

    def setDecayConstants(self, xs):
        return _openrk.Mesh_setDecayConstants(self, xs)

    def setDelayedFractions(self, xs):
        return _openrk.Mesh_setDelayedFractions(self, xs)

    def getKeff0(self):
        return _openrk.Mesh_getKeff0(self)

    def getClock(self):
        return _openrk.Mesh_getClock(self)

    def getWidth(self):
        return _openrk.Mesh_getWidth(self)

    def getHeight(self):
        return _openrk.Mesh_getHeight(self)

    def getDepth(self):
        return _openrk.Mesh_getDepth(self)

    def getBoundary(self, side):
        return _openrk.Mesh_getBoundary(self, side)

    def getNumShapeEnergyGroups(self):
        return _openrk.Mesh_getNumShapeEnergyGroups(self)

    def getNumAmpEnergyGroups(self):
        return _openrk.Mesh_getNumAmpEnergyGroups(self)

    def getNumDelayedGroups(self):
        return _openrk.Mesh_getNumDelayedGroups(self)

    def getBuckling(self):
        return _openrk.Mesh_getBuckling(self)

    def getDecayConstants(self):
        return _openrk.Mesh_getDecayConstants(self)

    def getDelayedFractions(self):
        return _openrk.Mesh_getDelayedFractions(self)

    def getDecayConstantByGroup(self, group):
        return _openrk.Mesh_getDecayConstantByGroup(self, group)

    def getDelayedFractionByGroup(self, group):
        return _openrk.Mesh_getDelayedFractionByGroup(self, group)

    def getXMin(self):
        return _openrk.Mesh_getXMin(self)

    def getXMax(self):
        return _openrk.Mesh_getXMax(self)

    def getYMin(self):
        return _openrk.Mesh_getYMin(self)

    def getYMax(self):
        return _openrk.Mesh_getYMax(self)

    def getZMin(self):
        return _openrk.Mesh_getZMin(self)

    def getZMax(self):
        return _openrk.Mesh_getZMax(self)

    def getFlux(self, position):
        return _openrk.Mesh_getFlux(self, position)

    def getPower(self, position):
        return _openrk.Mesh_getPower(self, position)

    def getTemperature(self, position):
        return _openrk.Mesh_getTemperature(self, position)

    def getPowerByValue(self, cell, position):
        return _openrk.Mesh_getPowerByValue(self, cell, position)

    def getTemperatureByValue(self, cell, position):
        return _openrk.Mesh_getTemperatureByValue(self, cell, position)

    def getMaterial(self, cell):
        return _openrk.Mesh_getMaterial(self, cell)
Mesh_swigregister = _openrk.Mesh_swigregister
Mesh_swigregister(Mesh)

class StructuredMesh(Mesh):
    __swig_setmethods__ = {}
    for _s in [Mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructuredMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructuredMesh, name)
    __repr__ = _swig_repr

    def __init__(self, width=1.0, height=1.0, depth=1.0, num_x=1, num_y=1, num_z=1):
        this = _openrk.new_StructuredMesh(width, height, depth, num_x, num_y, num_z)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_StructuredMesh
    __del__ = lambda self: None

    def setNumX(self, num_x):
        return _openrk.StructuredMesh_setNumX(self, num_x)

    def setNumY(self, num_y):
        return _openrk.StructuredMesh_setNumY(self, num_y)

    def setNumZ(self, num_z):
        return _openrk.StructuredMesh_setNumZ(self, num_z)

    def setClock(self, clock):
        return _openrk.StructuredMesh_setClock(self, clock)

    def getCurrent(self, position):
        return _openrk.StructuredMesh_getCurrent(self, position)

    def getDifLinear(self, position):
        return _openrk.StructuredMesh_getDifLinear(self, position)

    def getDifNonlinear(self, position):
        return _openrk.StructuredMesh_getDifNonlinear(self, position)

    def getNeighborCell(self, x, y, z, side):
        return _openrk.StructuredMesh_getNeighborCell(self, x, y, z, side)

    def getNeighborMaterial(self, x, y, z, side):
        return _openrk.StructuredMesh_getNeighborMaterial(self, x, y, z, side)

    def getNumX(self):
        return _openrk.StructuredMesh_getNumX(self)

    def getNumY(self):
        return _openrk.StructuredMesh_getNumY(self)

    def getNumZ(self):
        return _openrk.StructuredMesh_getNumZ(self)

    def getCellWidth(self):
        return _openrk.StructuredMesh_getCellWidth(self)

    def getCellHeight(self):
        return _openrk.StructuredMesh_getCellHeight(self)

    def getCellDepth(self):
        return _openrk.StructuredMesh_getCellDepth(self)

    def getCellVolume(self):
        return _openrk.StructuredMesh_getCellVolume(self)

    def findCell(self, x, y, z):
        return _openrk.StructuredMesh_findCell(self, x, y, z)

    def computeFuelVolume(self):
        return _openrk.StructuredMesh_computeFuelVolume(self)

    def uniquifyMaterials(self):
        return _openrk.StructuredMesh_uniquifyMaterials(self)

    def getMaxTemperature(self, position):
        return _openrk.StructuredMesh_getMaxTemperature(self, position)

    def copyPower(self, position_from, position_to):
        return _openrk.StructuredMesh_copyPower(self, position_from, position_to)

    def copyTemperature(self, position_from, position_to):
        return _openrk.StructuredMesh_copyTemperature(self, position_from, position_to)

    def setTemperature(self, temperature):
        return _openrk.StructuredMesh_setTemperature(self, temperature)
StructuredMesh_swigregister = _openrk.StructuredMesh_swigregister
StructuredMesh_swigregister(StructuredMesh)

class StructuredShapeMesh(StructuredMesh):
    __swig_setmethods__ = {}
    for _s in [StructuredMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructuredShapeMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [StructuredMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructuredShapeMesh, name)
    __repr__ = _swig_repr

    def __init__(self, width=1.0, height=1.0, depth=1.0, num_x=1, num_y=1, num_z=1):
        this = _openrk.new_StructuredShapeMesh(width, height, depth, num_x, num_y, num_z)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_StructuredShapeMesh
    __del__ = lambda self: None

    def setAmpMesh(self, mesh):
        return _openrk.StructuredShapeMesh_setAmpMesh(self, mesh)

    def setFluxByValue(self, flux, cell, group, position):
        return _openrk.StructuredShapeMesh_setFluxByValue(self, flux, cell, group, position)

    def setCurrentByValue(self, current, cell, group, side, position):
        return _openrk.StructuredShapeMesh_setCurrentByValue(self, current, cell, group, side, position)

    def setDifLinearByValue(self, dif_linear, cell, group, side, position):
        return _openrk.StructuredShapeMesh_setDifLinearByValue(self, dif_linear, cell, group, side, position)

    def setDifNonlinearByValue(self, dif_nonlinear, cell, group, side, position):
        return _openrk.StructuredShapeMesh_setDifNonlinearByValue(self, dif_nonlinear, cell, group, side, position)

    def setGroupStructure(self, group_indices):
        return _openrk.StructuredShapeMesh_setGroupStructure(self, group_indices)

    def getFluxByValue(self, cell, group, position):
        return _openrk.StructuredShapeMesh_getFluxByValue(self, cell, group, position)

    def getCurrentByValue(self, cell, group, side, position):
        return _openrk.StructuredShapeMesh_getCurrentByValue(self, cell, group, side, position)

    def getDifLinearByValue(self, cell, group, side, position):
        return _openrk.StructuredShapeMesh_getDifLinearByValue(self, cell, group, side, position)

    def getDifNonlinearByValue(self, cell, group, side, position):
        return _openrk.StructuredShapeMesh_getDifNonlinearByValue(self, cell, group, side, position)

    def getAmpGroup(self, shape_group):
        return _openrk.StructuredShapeMesh_getAmpGroup(self, shape_group)

    def clone(self):
        return _openrk.StructuredShapeMesh_clone(self)

    def uniformRefine(self, refine_x=1, refine_y=1, refine_z=1):
        return _openrk.StructuredShapeMesh_uniformRefine(self, refine_x, refine_y, refine_z)

    def initialize(self):
        return _openrk.StructuredShapeMesh_initialize(self)

    def synthesizeFlux(self, position):
        return _openrk.StructuredShapeMesh_synthesizeFlux(self, position)

    def reconstructFlux(self, position, position_shape, position_amp):
        return _openrk.StructuredShapeMesh_reconstructFlux(self, position, position_shape, position_amp)

    def computePower(self, position):
        return _openrk.StructuredShapeMesh_computePower(self, position)

    def computeInitialPrecursorConc(self, position):
        return _openrk.StructuredShapeMesh_computeInitialPrecursorConc(self, position)

    def integratePrecursorConc(self, position_from, position_to):
        return _openrk.StructuredShapeMesh_integratePrecursorConc(self, position_from, position_to)

    def integrateTemperature(self, position_from, position_to):
        return _openrk.StructuredShapeMesh_integrateTemperature(self, position_from, position_to)

    def computeDifCoefs(self, position):
        return _openrk.StructuredShapeMesh_computeDifCoefs(self, position)

    def copyFlux(self, position_from, position_to):
        return _openrk.StructuredShapeMesh_copyFlux(self, position_from, position_to)

    def copyCurrent(self, position_from, position_to):
        return _openrk.StructuredShapeMesh_copyCurrent(self, position_from, position_to)

    def copyDifLinear(self, position_from, position_to):
        return _openrk.StructuredShapeMesh_copyDifLinear(self, position_from, position_to)

    def copyDifNonlinear(self, position_from, position_to):
        return _openrk.StructuredShapeMesh_copyDifNonlinear(self, position_from, position_to)

    def scaleFlux(self, position, scale_val):
        return _openrk.StructuredShapeMesh_scaleFlux(self, position, scale_val)

    def computeAveragePower(self, position):
        return _openrk.StructuredShapeMesh_computeAveragePower(self, position)

    def computePowerL2Norm(self, position_1, position_2):
        return _openrk.StructuredShapeMesh_computePowerL2Norm(self, position_1, position_2)
StructuredShapeMesh_swigregister = _openrk.StructuredShapeMesh_swigregister
StructuredShapeMesh_swigregister(StructuredShapeMesh)

class AmpMesh(StructuredMesh):
    __swig_setmethods__ = {}
    for _s in [StructuredMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmpMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [StructuredMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmpMesh, name)
    __repr__ = _swig_repr

    def __init__(self, width=1.0, height=1.0, depth=1.0, num_x=1, num_y=1, num_z=1):
        this = _openrk.new_AmpMesh(width, height, depth, num_x, num_y, num_z)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_AmpMesh
    __del__ = lambda self: None

    def setOpticallyThick(self, optically_thick):
        return _openrk.AmpMesh_setOpticallyThick(self, optically_thick)

    def setShapeMesh(self, mesh):
        return _openrk.AmpMesh_setShapeMesh(self, mesh)

    def setFluxByValue(self, flux, cell, group, position):
        return _openrk.AmpMesh_setFluxByValue(self, flux, cell, group, position)

    def setCurrentByValue(self, current, cell, group, side, position):
        return _openrk.AmpMesh_setCurrentByValue(self, current, cell, group, side, position)

    def setDifLinearByValue(self, dif_linear, cell, group, side, position):
        return _openrk.AmpMesh_setDifLinearByValue(self, dif_linear, cell, group, side, position)

    def setDifNonlinearByValue(self, dif_nonlinear, cell, group, side, position):
        return _openrk.AmpMesh_setDifNonlinearByValue(self, dif_nonlinear, cell, group, side, position)

    def setGroupStructure(self, group_indices):
        return _openrk.AmpMesh_setGroupStructure(self, group_indices)

    def getFluxByValue(self, cell, group, position):
        return _openrk.AmpMesh_getFluxByValue(self, cell, group, position)

    def getCurrentByValue(self, cell, group, side, position):
        return _openrk.AmpMesh_getCurrentByValue(self, cell, group, side, position)

    def getDifLinearByValue(self, cell, group, side, position):
        return _openrk.AmpMesh_getDifLinearByValue(self, cell, group, side, position)

    def getDifNonlinearByValue(self, cell, group, side, position):
        return _openrk.AmpMesh_getDifNonlinearByValue(self, cell, group, side, position)

    def clone(self):
        return _openrk.AmpMesh_clone(self)

    def initialize(self):
        return _openrk.AmpMesh_initialize(self)

    def condenseMaterials(self, position, save_flux=False):
        return _openrk.AmpMesh_condenseMaterials(self, position, save_flux)

    def computePower(self, position):
        return _openrk.AmpMesh_computePower(self, position)

    def computeCurrent(self, position):
        return _openrk.AmpMesh_computeCurrent(self, position)

    def computeDifCorrect(self, dif_coef, length):
        return _openrk.AmpMesh_computeDifCorrect(self, dif_coef, length)

    def computeDifCoefs(self, position):
        return _openrk.AmpMesh_computeDifCoefs(self, position)

    def copyFlux(self, position_from, position_to):
        return _openrk.AmpMesh_copyFlux(self, position_from, position_to)

    def copyCurrent(self, position_from, position_to):
        return _openrk.AmpMesh_copyCurrent(self, position_from, position_to)

    def copyDifLinear(self, position_from, position_to):
        return _openrk.AmpMesh_copyDifLinear(self, position_from, position_to)

    def copyDifNonlinear(self, position_from, position_to):
        return _openrk.AmpMesh_copyDifNonlinear(self, position_from, position_to)

    def computeAveragePower(self, position):
        return _openrk.AmpMesh_computeAveragePower(self, position)

    def computePowerL2Norm(self, position_1, position_2):
        return _openrk.AmpMesh_computePowerL2Norm(self, position_1, position_2)

    def interpolateDifNonlinear(self, position_begin, position_end, position):
        return _openrk.AmpMesh_interpolateDifNonlinear(self, position_begin, position_end, position)
AmpMesh_swigregister = _openrk.AmpMesh_swigregister
AmpMesh_swigregister(AmpMesh)

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr

    def __init__(self, shape_mesh, amp_mesh):
        this = _openrk.new_Solver(shape_mesh, amp_mesh)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Solver
    __del__ = lambda self: None

    def getAMShape(self):
        return _openrk.Solver_getAMShape(self)

    def getAShape(self):
        return _openrk.Solver_getAShape(self)

    def getMShape(self):
        return _openrk.Solver_getMShape(self)

    def getBShape(self):
        return _openrk.Solver_getBShape(self)

    def getAMAmp(self):
        return _openrk.Solver_getAMAmp(self)

    def getAAmp(self):
        return _openrk.Solver_getAAmp(self)

    def getMAmp(self):
        return _openrk.Solver_getMAmp(self)

    def getBAmp(self):
        return _openrk.Solver_getBAmp(self)

    def makeAMShapeInitial(self, position):
        return _openrk.Solver_makeAMShapeInitial(self, position)

    def computeInitialShape(self, tol):
        return _openrk.Solver_computeInitialShape(self, tol)

    def makeAMAmp(self, wt):
        return _openrk.Solver_makeAMAmp(self, wt)

    def makeAMShape(self, wt):
        return _openrk.Solver_makeAMShape(self, wt)
Solver_swigregister = _openrk.Solver_swigregister
Solver_swigregister(Solver)


_openrk.FORWARD_EULER_swigconstant(_openrk)
FORWARD_EULER = _openrk.FORWARD_EULER

_openrk.BACKWARD_EULER_swigconstant(_openrk)
BACKWARD_EULER = _openrk.BACKWARD_EULER

_openrk.CRANK_NICOLSON_swigconstant(_openrk)
CRANK_NICOLSON = _openrk.CRANK_NICOLSON

_openrk.CUSTOM_swigconstant(_openrk)
CUSTOM = _openrk.CUSTOM
class Transient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transient, name)
    __repr__ = _swig_repr

    def __init__(self, inner_method=BACKWARD_EULER, outer_method=BACKWARD_EULER, wt_inner=1.0, wt_outer=1.0):
        this = _openrk.new_Transient(inner_method, outer_method, wt_inner, wt_outer)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Transient
    __del__ = lambda self: None

    def setInnerMethod(self, inner_method, wt=0.0):
        return _openrk.Transient_setInnerMethod(self, inner_method, wt)

    def setOuterMethod(self, outer_method, wt=0.0):
        return _openrk.Transient_setOuterMethod(self, outer_method, wt)

    def setInitialPower(self, initial_power):
        return _openrk.Transient_setInitialPower(self, initial_power)

    def setClock(self, clock):
        return _openrk.Transient_setClock(self, clock)

    def setSolver(self, solver):
        return _openrk.Transient_setSolver(self, solver)

    def setShapeMesh(self, mesh):
        return _openrk.Transient_setShapeMesh(self, mesh)

    def setAmpMesh(self, mesh):
        return _openrk.Transient_setAmpMesh(self, mesh)

    def computeInitialShape(self):
        return _openrk.Transient_computeInitialShape(self)

    def takeInnerStep(self):
        return _openrk.Transient_takeInnerStep(self)

    def takeOuterStep(self):
        return _openrk.Transient_takeOuterStep(self)

    def takeOuterStepOnly(self):
        return _openrk.Transient_takeOuterStepOnly(self)

    def broadcastToActive(self, position):
        return _openrk.Transient_broadcastToActive(self, position)

    def broadcastToAll(self, position):
        return _openrk.Transient_broadcastToAll(self, position)

    def broadcastToOne(self, position_from, position_to):
        return _openrk.Transient_broadcastToOne(self, position_from, position_to)
Transient_swigregister = _openrk.Transient_swigregister
Transient_swigregister(Transient)

# This file is compatible with both classic and new-style classes.


