# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _openrk
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


DEBUG = _openrk.DEBUG
INFO = _openrk.INFO
NORMAL = _openrk.NORMAL
SEPARATOR = _openrk.SEPARATOR
HEADER = _openrk.HEADER
TITLE = _openrk.TITLE
WARNING = _openrk.WARNING
CRITICAL = _openrk.CRITICAL
RESULT = _openrk.RESULT
UNITTEST = _openrk.UNITTEST
ERROR = _openrk.ERROR
set_err = _openrk.set_err
set_output_directory = _openrk.set_output_directory
get_output_directory = _openrk.get_output_directory
set_log_filename = _openrk.set_log_filename
get_log_filename = _openrk.get_log_filename
set_separator_character = _openrk.set_separator_character
get_separator_character = _openrk.get_separator_character
set_header_character = _openrk.set_header_character
get_header_character = _openrk.get_header_character
set_title_character = _openrk.set_title_character
get_title_character = _openrk.get_title_character
set_line_length = _openrk.set_line_length
set_log_level = _openrk.set_log_level
get_log_level = _openrk.get_log_level
log_printf = _openrk.log_printf
create_multiline_msg = _openrk.create_multiline_msg
class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openrk.new_Array(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_Array
    __del__ = lambda self : None;
    def clear(*args, **kwargs): return _openrk.Array_clear(*args, **kwargs)
    def scaleByValue(*args, **kwargs): return _openrk.Array_scaleByValue(*args, **kwargs)
    def printString(*args, **kwargs): return _openrk.Array_printString(*args, **kwargs)
    def copyTo(*args, **kwargs): return _openrk.Array_copyTo(*args, **kwargs)
    def tile(*args, **kwargs): return _openrk.Array_tile(*args, **kwargs)
    def repeat(*args, **kwargs): return _openrk.Array_repeat(*args, **kwargs)
    def sumAxis(*args, **kwargs): return _openrk.Array_sumAxis(*args, **kwargs)
    def multiply(*args, **kwargs): return _openrk.Array_multiply(*args, **kwargs)
    def divide(*args, **kwargs): return _openrk.Array_divide(*args, **kwargs)
    def add(*args, **kwargs): return _openrk.Array_add(*args, **kwargs)
    def subtract(*args, **kwargs): return _openrk.Array_subtract(*args, **kwargs)
    def incrementValue(*args, **kwargs): return _openrk.Array_incrementValue(*args, **kwargs)
    def reshape(*args, **kwargs): return _openrk.Array_reshape(*args, **kwargs)
    def flatten(*args, **kwargs): return _openrk.Array_flatten(*args, **kwargs)
    def fillWithRandom(*args, **kwargs): return _openrk.Array_fillWithRandom(*args, **kwargs)
    def outputValues(*args, **kwargs): return _openrk.Array_outputValues(*args, **kwargs)
    def getValue(*args, **kwargs): return _openrk.Array_getValue(*args, **kwargs)
    def getValues(*args, **kwargs): return _openrk.Array_getValues(*args, **kwargs)
    def getNumDimensions(*args, **kwargs): return _openrk.Array_getNumDimensions(*args, **kwargs)
    def getShape(*args, **kwargs): return _openrk.Array_getShape(*args, **kwargs)
    def getSize(*args, **kwargs): return _openrk.Array_getSize(*args, **kwargs)
    def getSum(*args, **kwargs): return _openrk.Array_getSum(*args, **kwargs)
    def getIndex(*args, **kwargs): return _openrk.Array_getIndex(*args, **kwargs)
    def getIndices(*args, **kwargs): return _openrk.Array_getIndices(*args, **kwargs)
    def setDimensions(*args, **kwargs): return _openrk.Array_setDimensions(*args, **kwargs)
    def setValue(*args, **kwargs): return _openrk.Array_setValue(*args, **kwargs)
    def setValues(*args, **kwargs): return _openrk.Array_setValues(*args, **kwargs)
    def setAll(*args, **kwargs): return _openrk.Array_setAll(*args, **kwargs)
Array_swigregister = _openrk.Array_swigregister
Array_swigregister(Array)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openrk.new_Matrix(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_Matrix
    __del__ = lambda self : None;
    def incrementValue(*args, **kwargs): return _openrk.Matrix_incrementValue(*args, **kwargs)
    def clear(*args, **kwargs): return _openrk.Matrix_clear(*args, **kwargs)
    def printString(*args, **kwargs): return _openrk.Matrix_printString(*args, **kwargs)
    def transpose(*args, **kwargs): return _openrk.Matrix_transpose(*args, **kwargs)
    def diags(*args, **kwargs): return _openrk.Matrix_diags(*args, **kwargs)
    def blockDiags(*args, **kwargs): return _openrk.Matrix_blockDiags(*args, **kwargs)
    def fillWithRandom(*args, **kwargs): return _openrk.Matrix_fillWithRandom(*args, **kwargs)
    def getValue(*args, **kwargs): return _openrk.Matrix_getValue(*args, **kwargs)
    def getA(*args, **kwargs): return _openrk.Matrix_getA(*args, **kwargs)
    def getIA(*args, **kwargs): return _openrk.Matrix_getIA(*args, **kwargs)
    def getJA(*args, **kwargs): return _openrk.Matrix_getJA(*args, **kwargs)
    def getDiag(*args, **kwargs): return _openrk.Matrix_getDiag(*args, **kwargs)
    def getNumCells(*args, **kwargs): return _openrk.Matrix_getNumCells(*args, **kwargs)
    def getNNZ(*args, **kwargs): return _openrk.Matrix_getNNZ(*args, **kwargs)
    def setValue(*args, **kwargs): return _openrk.Matrix_setValue(*args, **kwargs)
    def setDiags(*args, **kwargs): return _openrk.Matrix_setDiags(*args, **kwargs)
Matrix_swigregister = _openrk.Matrix_swigregister
Matrix_swigregister(Matrix)

eigenvalueSolve = _openrk.eigenvalueSolve
linearSolve = _openrk.linearSolve
matrixMultiplication = _openrk.matrixMultiplication
computeRMSE = _openrk.computeRMSE
setNumThreads = _openrk.setNumThreads


