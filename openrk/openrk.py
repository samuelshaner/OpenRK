# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openrk', [dirname(__file__)])
        except ImportError:
            import _openrk
            return _openrk
        if fp is not None:
            try:
                _mod = imp.load_module('_openrk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openrk = swig_import_helper()
    del swig_import_helper
else:
    import _openrk
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def eigenvalueSolve(A, M, X, tol):
    return _openrk.eigenvalueSolve(A, M, X, tol)
eigenvalueSolve = _openrk.eigenvalueSolve

def linearSolve(A, X, B, tol):
    return _openrk.linearSolve(A, X, B, tol)
linearSolve = _openrk.linearSolve

def matrixMultiplication(A, X, B):
    return _openrk.matrixMultiplication(A, X, B)
matrixMultiplication = _openrk.matrixMultiplication

def setNumThreads(num_threads):
    return _openrk.setNumThreads(num_threads)
setNumThreads = _openrk.setNumThreads

_openrk.DEBUG_swigconstant(_openrk)
DEBUG = _openrk.DEBUG

_openrk.INFO_swigconstant(_openrk)
INFO = _openrk.INFO

_openrk.NORMAL_swigconstant(_openrk)
NORMAL = _openrk.NORMAL

_openrk.SEPARATOR_swigconstant(_openrk)
SEPARATOR = _openrk.SEPARATOR

_openrk.HEADER_swigconstant(_openrk)
HEADER = _openrk.HEADER

_openrk.TITLE_swigconstant(_openrk)
TITLE = _openrk.TITLE

_openrk.WARNING_swigconstant(_openrk)
WARNING = _openrk.WARNING

_openrk.CRITICAL_swigconstant(_openrk)
CRITICAL = _openrk.CRITICAL

_openrk.RESULT_swigconstant(_openrk)
RESULT = _openrk.RESULT

_openrk.UNITTEST_swigconstant(_openrk)
UNITTEST = _openrk.UNITTEST

_openrk.ERROR_swigconstant(_openrk)
ERROR = _openrk.ERROR

def set_err(msg):
    return _openrk.set_err(msg)
set_err = _openrk.set_err

def set_output_directory(directory):
    return _openrk.set_output_directory(directory)
set_output_directory = _openrk.set_output_directory

def get_output_directory():
    return _openrk.get_output_directory()
get_output_directory = _openrk.get_output_directory

def set_log_filename(filename):
    return _openrk.set_log_filename(filename)
set_log_filename = _openrk.set_log_filename

def get_log_filename():
    return _openrk.get_log_filename()
get_log_filename = _openrk.get_log_filename

def set_separator_character(c):
    return _openrk.set_separator_character(c)
set_separator_character = _openrk.set_separator_character

def get_separator_character():
    return _openrk.get_separator_character()
get_separator_character = _openrk.get_separator_character

def set_header_character(c):
    return _openrk.set_header_character(c)
set_header_character = _openrk.set_header_character

def get_header_character():
    return _openrk.get_header_character()
get_header_character = _openrk.get_header_character

def set_title_character(c):
    return _openrk.set_title_character(c)
set_title_character = _openrk.set_title_character

def get_title_character():
    return _openrk.get_title_character()
get_title_character = _openrk.get_title_character

def set_line_length(length):
    return _openrk.set_line_length(length)
set_line_length = _openrk.set_line_length

def set_log_level(new_level):
    return _openrk.set_log_level(new_level)
set_log_level = _openrk.set_log_level

def get_log_level():
    return _openrk.get_log_level()
get_log_level = _openrk.get_log_level

def log_printf(level, format):
    return _openrk.log_printf(level, format)
log_printf = _openrk.log_printf

def create_multiline_msg(level, message):
    return _openrk.create_multiline_msg(level, message)
create_multiline_msg = _openrk.create_multiline_msg
class Clock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clock, name)
    __repr__ = _swig_repr

    def __init__(self, start_time=0.0, end_time=3.0, dt_outer=1.e-1, dt_inner=1.e-2):
        this = _openrk.new_Clock(start_time, end_time, dt_outer, dt_inner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Clock
    __del__ = lambda self: None

    def getTime(self, position):
        return _openrk.Clock_getTime(self, position)

    def getDtInner(self):
        return _openrk.Clock_getDtInner(self)

    def getDtOuter(self):
        return _openrk.Clock_getDtOuter(self)

    def getPositionName(self, position):
        return _openrk.Clock_getPositionName(self, position)

    def setDtOuter(self, dt_outer):
        return _openrk.Clock_setDtOuter(self, dt_outer)

    def setDtInner(self, dt_inner):
        return _openrk.Clock_setDtInner(self, dt_inner)

    def setTime(self, position, time):
        return _openrk.Clock_setTime(self, position, time)

    def setStartTime(self, time):
        return _openrk.Clock_setStartTime(self, time)

    def setEndTime(self, time):
        return _openrk.Clock_setEndTime(self, time)

    def takeInnerStep(self):
        return _openrk.Clock_takeInnerStep(self)

    def takeOuterStep(self):
        return _openrk.Clock_takeOuterStep(self)

    def resetToPreviousOuterStep(self):
        return _openrk.Clock_resetToPreviousOuterStep(self)

    def toString(self):
        return _openrk.Clock_toString(self)

    def printString(self):
        return _openrk.Clock_printString(self)
Clock_swigregister = _openrk.Clock_swigregister
Clock_swigregister(Clock)


def material_id():
    return _openrk.material_id()
material_id = _openrk.material_id
class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr

    def __init__(self, id=0):
        this = _openrk.new_Material(id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Material
    __del__ = lambda self: None

    def setNumEnergyGroups(self, num_groups):
        return _openrk.Material_setNumEnergyGroups(self, num_groups)

    def setNumDelayedGroups(self, num_groups):
        return _openrk.Material_setNumDelayedGroups(self, num_groups)

    def setEnergyPerFission(self, energy_per_fission):
        return _openrk.Material_setEnergyPerFission(self, energy_per_fission)

    def setSigmaT(self, xs):
        return _openrk.Material_setSigmaT(self, xs)

    def setSigmaA(self, xs):
        return _openrk.Material_setSigmaA(self, xs)

    def setSigmaS(self, xs):
        return _openrk.Material_setSigmaS(self, xs)

    def setSigmaF(self, xs):
        return _openrk.Material_setSigmaF(self, xs)

    def setNuSigmaF(self, xs):
        return _openrk.Material_setNuSigmaF(self, xs)

    def setChi(self, xs):
        return _openrk.Material_setChi(self, xs)

    def setDifCoef(self, xs):
        return _openrk.Material_setDifCoef(self, xs)

    def setVelocity(self, xs):
        return _openrk.Material_setVelocity(self, xs)

    def setPrecursorConc(self, xs):
        return _openrk.Material_setPrecursorConc(self, xs)

    def setDecayConstant(self, decay_constant, num_groups):
        return _openrk.Material_setDecayConstant(self, decay_constant, num_groups)

    def setDelayedFraction(self, delayed_fraction, num_groups):
        return _openrk.Material_setDelayedFraction(self, delayed_fraction, num_groups)

    def setSigmaTByGroup(self, *args, **kwargs):
        return _openrk.Material_setSigmaTByGroup(self, *args, **kwargs)

    def setSigmaAByGroup(self, *args, **kwargs):
        return _openrk.Material_setSigmaAByGroup(self, *args, **kwargs)

    def setSigmaFByGroup(self, *args, **kwargs):
        return _openrk.Material_setSigmaFByGroup(self, *args, **kwargs)

    def setNuSigmaFByGroup(self, *args, **kwargs):
        return _openrk.Material_setNuSigmaFByGroup(self, *args, **kwargs)

    def setSigmaSByGroup(self, *args, **kwargs):
        return _openrk.Material_setSigmaSByGroup(self, *args, **kwargs)

    def setChiByGroup(self, *args, **kwargs):
        return _openrk.Material_setChiByGroup(self, *args, **kwargs)

    def setDifCoefByGroup(self, *args, **kwargs):
        return _openrk.Material_setDifCoefByGroup(self, *args, **kwargs)

    def setVelocityByGroup(self, *args, **kwargs):
        return _openrk.Material_setVelocityByGroup(self, *args, **kwargs)

    def setPrecursorConcByGroup(self, *args, **kwargs):
        return _openrk.Material_setPrecursorConcByGroup(self, *args, **kwargs)

    def setTemperatureConversionFactor(self, conversion_factor):
        return _openrk.Material_setTemperatureConversionFactor(self, conversion_factor)

    def setDecayConstantByGroup(self, *args, **kwargs):
        return _openrk.Material_setDecayConstantByGroup(self, *args, **kwargs)

    def setDelayedFractionByGroup(self, *args, **kwargs):
        return _openrk.Material_setDelayedFractionByGroup(self, *args, **kwargs)

    def setClock(self, clock):
        return _openrk.Material_setClock(self, clock)

    def getId(self):
        return _openrk.Material_getId(self)

    def getNumEnergyGroups(self):
        return _openrk.Material_getNumEnergyGroups(self)

    def getNumDelayedGroups(self):
        return _openrk.Material_getNumDelayedGroups(self)

    def getEnergyPerFission(self):
        return _openrk.Material_getEnergyPerFission(self)

    def getSigmaT(self):
        return _openrk.Material_getSigmaT(self)

    def getSigmaA(self):
        return _openrk.Material_getSigmaA(self)

    def getSigmaS(self):
        return _openrk.Material_getSigmaS(self)

    def getSigmaF(self):
        return _openrk.Material_getSigmaF(self)

    def getNuSigmaF(self):
        return _openrk.Material_getNuSigmaF(self)

    def getChi(self):
        return _openrk.Material_getChi(self)

    def getDifCoef(self):
        return _openrk.Material_getDifCoef(self)

    def getVelocity(self):
        return _openrk.Material_getVelocity(self)

    def getPrecursorConc(self):
        return _openrk.Material_getPrecursorConc(self)

    def getDecayConstant(self):
        return _openrk.Material_getDecayConstant(self)

    def getDelayedFraction(self):
        return _openrk.Material_getDelayedFraction(self)

    def getSigmaTByGroup(self, *args, **kwargs):
        return _openrk.Material_getSigmaTByGroup(self, *args, **kwargs)

    def getSigmaAByGroup(self, *args, **kwargs):
        return _openrk.Material_getSigmaAByGroup(self, *args, **kwargs)

    def getSigmaSByGroup(self, *args, **kwargs):
        return _openrk.Material_getSigmaSByGroup(self, *args, **kwargs)

    def getSigmaFByGroup(self, *args, **kwargs):
        return _openrk.Material_getSigmaFByGroup(self, *args, **kwargs)

    def getNuSigmaFByGroup(self, *args, **kwargs):
        return _openrk.Material_getNuSigmaFByGroup(self, *args, **kwargs)

    def getChiByGroup(self, *args, **kwargs):
        return _openrk.Material_getChiByGroup(self, *args, **kwargs)

    def getDifCoefByGroup(self, *args, **kwargs):
        return _openrk.Material_getDifCoefByGroup(self, *args, **kwargs)

    def getVelocityByGroup(self, *args, **kwargs):
        return _openrk.Material_getVelocityByGroup(self, *args, **kwargs)

    def getPrecursorConcByGroup(self, *args, **kwargs):
        return _openrk.Material_getPrecursorConcByGroup(self, *args, **kwargs)

    def getDecayConstantByGroup(self, *args, **kwargs):
        return _openrk.Material_getDecayConstantByGroup(self, *args, **kwargs)

    def getDelayedFractionByGroup(self, *args, **kwargs):
        return _openrk.Material_getDelayedFractionByGroup(self, *args, **kwargs)

    def getDelayedFractionTotal(self, *args, **kwargs):
        return _openrk.Material_getDelayedFractionTotal(self, *args, **kwargs)

    def getTemperatureConversionFactor(self):
        return _openrk.Material_getTemperatureConversionFactor(self)

    def isFissionable(self):
        return _openrk.Material_isFissionable(self)

    def toString(self):
        return _openrk.Material_toString(self)

    def printString(self):
        return _openrk.Material_printString(self)

    def clone(self):
        return _openrk.Material_clone(self)

    def copy(self, position_from, position_to):
        return _openrk.Material_copy(self, position_from, position_to)
Material_swigregister = _openrk.Material_swigregister
Material_swigregister(Material)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, num_x=1, num_y=1, num_z=1, num_groups=1):
        this = _openrk.new_Matrix(num_x, num_y, num_z, num_groups)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Matrix
    __del__ = lambda self: None

    def incrementValue(self, row, col, val):
        return _openrk.Matrix_incrementValue(self, row, col, val)

    def incrementValueByCoords(self, x_from, y_from, z_from, g_from, x_to, y_to, z_to, g_to, val):
        return _openrk.Matrix_incrementValueByCoords(self, x_from, y_from, z_from, g_from, x_to, y_to, z_to, g_to, val)

    def incrementValueByCell(self, cell_from, g_from, cell_to, g_to, val):
        return _openrk.Matrix_incrementValueByCell(self, cell_from, g_from, cell_to, g_to, val)

    def setValue(self, row, col, val):
        return _openrk.Matrix_setValue(self, row, col, val)

    def setValueByCoords(self, x_from, y_from, z_from, g_from, x_to, y_to, z_to, g_to, val):
        return _openrk.Matrix_setValueByCoords(self, x_from, y_from, z_from, g_from, x_to, y_to, z_to, g_to, val)

    def setValueByCell(self, cell_from, g_from, cell_to, g_to, val):
        return _openrk.Matrix_setValueByCell(self, cell_from, g_from, cell_to, g_to, val)

    def clear(self):
        return _openrk.Matrix_clear(self)

    def convertToCSR(self):
        return _openrk.Matrix_convertToCSR(self)

    def printString(self):
        return _openrk.Matrix_printString(self)

    def random(self):
        return _openrk.Matrix_random(self)

    def getValue(self, row, col):
        return _openrk.Matrix_getValue(self, row, col)

    def getValueByCoords(self, x_from, y_from, z_from, g_from, x_to, y_to, z_to, g_to):
        return _openrk.Matrix_getValueByCoords(self, x_from, y_from, z_from, g_from, x_to, y_to, z_to, g_to)

    def getValueByCell(self, cell_from, g_from, cell_to, g_to):
        return _openrk.Matrix_getValueByCell(self, cell_from, g_from, cell_to, g_to)

    def getA(self):
        return _openrk.Matrix_getA(self)

    def getIA(self):
        return _openrk.Matrix_getIA(self)

    def getJA(self):
        return _openrk.Matrix_getJA(self)

    def getDIAG(self):
        return _openrk.Matrix_getDIAG(self)

    def getNumX(self):
        return _openrk.Matrix_getNumX(self)

    def getNumY(self):
        return _openrk.Matrix_getNumY(self)

    def getNumZ(self):
        return _openrk.Matrix_getNumZ(self)

    def getNumGroups(self):
        return _openrk.Matrix_getNumGroups(self)

    def getNumRows(self):
        return _openrk.Matrix_getNumRows(self)

    def getNNZ(self):
        return _openrk.Matrix_getNNZ(self)
Matrix_swigregister = _openrk.Matrix_swigregister
Matrix_swigregister(Matrix)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr

    def __init__(self, num_x=1, num_y=1, num_z=1, num_groups=1):
        this = _openrk.new_Vector(num_x, num_y, num_z, num_groups)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Vector
    __del__ = lambda self: None

    def incrementValue(self, row, val):
        return _openrk.Vector_incrementValue(self, row, val)

    def incrementValueByCell(self, cell, g, val):
        return _openrk.Vector_incrementValueByCell(self, cell, g, val)

    def incrementValueByCoords(self, x, y, z, g, val):
        return _openrk.Vector_incrementValueByCoords(self, x, y, z, g, val)

    def setValue(self, row, val):
        return _openrk.Vector_setValue(self, row, val)

    def setValueByCoords(self, x, y, z, g, val):
        return _openrk.Vector_setValueByCoords(self, x, y, z, g, val)

    def setValueByCell(self, cell, g, val):
        return _openrk.Vector_setValueByCell(self, cell, g, val)

    def setAll(self, val):
        return _openrk.Vector_setAll(self, val)

    def zero(self):
        return _openrk.Vector_zero(self)

    def scaleByValue(self, val):
        return _openrk.Vector_scaleByValue(self, val)

    def toString(self):
        return _openrk.Vector_toString(self)

    def printString(self):
        return _openrk.Vector_printString(self)

    def copyTo(self, vector):
        return _openrk.Vector_copyTo(self, vector)

    def random(self):
        return _openrk.Vector_random(self)

    def getValue(self, row):
        return _openrk.Vector_getValue(self, row)

    def getValueByCoords(self, x, y, z, g):
        return _openrk.Vector_getValueByCoords(self, x, y, z, g)

    def getValueByCell(self, cell, g=0):
        return _openrk.Vector_getValueByCell(self, cell, g)

    def getArray(self):
        return _openrk.Vector_getArray(self)

    def getNumX(self):
        return _openrk.Vector_getNumX(self)

    def getNumY(self):
        return _openrk.Vector_getNumY(self)

    def getNumZ(self):
        return _openrk.Vector_getNumZ(self)

    def getNumGroups(self):
        return _openrk.Vector_getNumGroups(self)

    def getNumRows(self):
        return _openrk.Vector_getNumRows(self)
Vector_swigregister = _openrk.Vector_swigregister
Vector_swigregister(Vector)

class FunctionalMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionalMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionalMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, id=0):
        this = _openrk.new_FunctionalMaterial(id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_FunctionalMaterial
    __del__ = lambda self: None

    def setNumEnergyGroups(self, num_groups):
        return _openrk.FunctionalMaterial_setNumEnergyGroups(self, num_groups)

    def setTimeSteps(self, time_steps):
        return _openrk.FunctionalMaterial_setTimeSteps(self, time_steps)

    def setSigmaT(self, xs):
        return _openrk.FunctionalMaterial_setSigmaT(self, xs)

    def setSigmaA(self, xs):
        return _openrk.FunctionalMaterial_setSigmaA(self, xs)

    def setSigmaS(self, xs):
        return _openrk.FunctionalMaterial_setSigmaS(self, xs)

    def setSigmaF(self, xs):
        return _openrk.FunctionalMaterial_setSigmaF(self, xs)

    def setNuSigmaF(self, xs):
        return _openrk.FunctionalMaterial_setNuSigmaF(self, xs)

    def setChi(self, xs):
        return _openrk.FunctionalMaterial_setChi(self, xs)

    def setDifCoef(self, xs):
        return _openrk.FunctionalMaterial_setDifCoef(self, xs)

    def setVelocity(self, xs):
        return _openrk.FunctionalMaterial_setVelocity(self, xs)

    def setDopplerCoefficients(self, xs):
        return _openrk.FunctionalMaterial_setDopplerCoefficients(self, xs)

    def setSigmaTByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setSigmaTByGroup(self, *args, **kwargs)

    def setSigmaAByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setSigmaAByGroup(self, *args, **kwargs)

    def setSigmaFByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setSigmaFByGroup(self, *args, **kwargs)

    def setNuSigmaFByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setNuSigmaFByGroup(self, *args, **kwargs)

    def setSigmaSByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setSigmaSByGroup(self, *args, **kwargs)

    def setChiByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setChiByGroup(self, *args, **kwargs)

    def setDifCoefByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setDifCoefByGroup(self, *args, **kwargs)

    def setVelocityByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_setVelocityByGroup(self, *args, **kwargs)

    def getSigmaTByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getSigmaTByGroup(self, *args, **kwargs)

    def getSigmaAByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getSigmaAByGroup(self, *args, **kwargs)

    def getSigmaSByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getSigmaSByGroup(self, *args, **kwargs)

    def getSigmaFByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getSigmaFByGroup(self, *args, **kwargs)

    def getNuSigmaFByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getNuSigmaFByGroup(self, *args, **kwargs)

    def getChiByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getChiByGroup(self, *args, **kwargs)

    def getDifCoefByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getDifCoefByGroup(self, *args, **kwargs)

    def getVelocityByGroup(self, *args, **kwargs):
        return _openrk.FunctionalMaterial_getVelocityByGroup(self, *args, **kwargs)

    def getDopplerCoefficientByGroup(self, group):
        return _openrk.FunctionalMaterial_getDopplerCoefficientByGroup(self, group)

    def getTimeStep(self, position):
        return _openrk.FunctionalMaterial_getTimeStep(self, position)

    def toString(self):
        return _openrk.FunctionalMaterial_toString(self)

    def clone(self):
        return _openrk.FunctionalMaterial_clone(self)

    def copy(self, position_from, position_to):
        return _openrk.FunctionalMaterial_copy(self, position_from, position_to)
FunctionalMaterial_swigregister = _openrk.FunctionalMaterial_swigregister
FunctionalMaterial_swigregister(FunctionalMaterial)


_openrk.VACUUM_swigconstant(_openrk)
VACUUM = _openrk.VACUUM

_openrk.REFLECTIVE_swigconstant(_openrk)
REFLECTIVE = _openrk.REFLECTIVE
class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr

    def __init__(self, width=1.0, height=1.0, depth=1.0):
        this = _openrk.new_Geometry(width, height, depth)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_Geometry
    __del__ = lambda self: None

    def setAmpMeshDimensions(self, num_x=1, num_y=1, num_z=1):
        return _openrk.Geometry_setAmpMeshDimensions(self, num_x, num_y, num_z)

    def setXMin(self, x_min):
        return _openrk.Geometry_setXMin(self, x_min)

    def setXMax(self, x_max):
        return _openrk.Geometry_setXMax(self, x_max)

    def setYMin(self, y_min):
        return _openrk.Geometry_setYMin(self, y_min)

    def setYMax(self, y_max):
        return _openrk.Geometry_setYMax(self, y_max)

    def setZMin(self, z_min):
        return _openrk.Geometry_setZMin(self, z_min)

    def setZMax(self, z_max):
        return _openrk.Geometry_setZMax(self, z_max)

    def setBoundary(self, side, boundary):
        return _openrk.Geometry_setBoundary(self, side, boundary)

    def setMaterial(self, material, cell):
        return _openrk.Geometry_setMaterial(self, material, cell)

    def setNumShapeCells(self, num_shape_cells):
        return _openrk.Geometry_setNumShapeCells(self, num_shape_cells)

    def getWidth(self):
        return _openrk.Geometry_getWidth(self)

    def getHeight(self):
        return _openrk.Geometry_getHeight(self)

    def getDepth(self):
        return _openrk.Geometry_getDepth(self)

    def getBoundary(self, side):
        return _openrk.Geometry_getBoundary(self, side)

    def getXMin(self):
        return _openrk.Geometry_getXMin(self)

    def getXMax(self):
        return _openrk.Geometry_getXMax(self)

    def getYMin(self):
        return _openrk.Geometry_getYMin(self)

    def getYMax(self):
        return _openrk.Geometry_getYMax(self)

    def getZMin(self):
        return _openrk.Geometry_getZMin(self)

    def getZMax(self):
        return _openrk.Geometry_getZMax(self)

    def getNumXAmp(self):
        return _openrk.Geometry_getNumXAmp(self)

    def getNumYAmp(self):
        return _openrk.Geometry_getNumYAmp(self)

    def getNumZAmp(self):
        return _openrk.Geometry_getNumZAmp(self)

    def getMaterial(self, cell):
        return _openrk.Geometry_getMaterial(self, cell)

    def getAmpToShapeMap(self):
        return _openrk.Geometry_getAmpToShapeMap(self)

    def getShapeToAmpMap(self):
        return _openrk.Geometry_getShapeToAmpMap(self)

    def getNumEnergyGroups(self):
        return _openrk.Geometry_getNumEnergyGroups(self)

    def getNumDelayedGroups(self):
        return _openrk.Geometry_getNumDelayedGroups(self)

    def getNeighborAmpCell(self, x, y, z, side):
        return _openrk.Geometry_getNeighborAmpCell(self, x, y, z, side)

    def getVolume(self, cell):
        return _openrk.Geometry_getVolume(self, cell)

    def getNumShapeCells(self):
        return _openrk.Geometry_getNumShapeCells(self)

    def getNumAmpCells(self):
        return _openrk.Geometry_getNumAmpCells(self)

    def addShapeCellToAmpCell(self, shape_cell, amp_cell):
        return _openrk.Geometry_addShapeCellToAmpCell(self, shape_cell, amp_cell)

    def findAmpCellContainingShapeCell(self, shape_cell):
        return _openrk.Geometry_findAmpCellContainingShapeCell(self, shape_cell)

    def uniquifyMaterials(self):
        return _openrk.Geometry_uniquifyMaterials(self)

    def clone(self):
        return _openrk.Geometry_clone(self)
Geometry_swigregister = _openrk.Geometry_swigregister
Geometry_swigregister(Geometry)

class GeometryDiffusion(Geometry):
    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryDiffusion, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryDiffusion, name)
    __repr__ = _swig_repr

    def __init__(self, width=1.0, height=1.0, depth=1.0):
        this = _openrk.new_GeometryDiffusion(width, height, depth)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_GeometryDiffusion
    __del__ = lambda self: None

    def setShapeMeshDimensions(self, num_x=1, num_y=1, num_z=1):
        return _openrk.GeometryDiffusion_setShapeMeshDimensions(self, num_x, num_y, num_z)

    def getNumXShape(self):
        return _openrk.GeometryDiffusion_getNumXShape(self)

    def getNumYShape(self):
        return _openrk.GeometryDiffusion_getNumYShape(self)

    def getNumZShape(self):
        return _openrk.GeometryDiffusion_getNumZShape(self)

    def getNeighborShapeCell(self, x, y, z, side):
        return _openrk.GeometryDiffusion_getNeighborShapeCell(self, x, y, z, side)

    def uniformRefine(self, refine_x=1, refine_y=1, refine_z=1):
        return _openrk.GeometryDiffusion_uniformRefine(self, refine_x, refine_y, refine_z)

    def clone(self):
        return _openrk.GeometryDiffusion_clone(self)

    def generateCellMap(self):
        return _openrk.GeometryDiffusion_generateCellMap(self)
GeometryDiffusion_swigregister = _openrk.GeometryDiffusion_swigregister
GeometryDiffusion_swigregister(GeometryDiffusion)


_openrk.IQS_swigconstant(_openrk)
IQS = _openrk.IQS

_openrk.THETA_swigconstant(_openrk)
THETA = _openrk.THETA
class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openrk.delete_Solver
    __del__ = lambda self: None

    def getAmpMatrix(self):
        return _openrk.Solver_getAmpMatrix(self)

    def getAmpSource(self):
        return _openrk.Solver_getAmpSource(self)

    def getKeff0(self):
        return _openrk.Solver_getKeff0(self)

    def getMethod(self):
        return _openrk.Solver_getMethod(self)

    def getBuckling(self):
        return _openrk.Solver_getBuckling(self)

    def getTemperature(self, time):
        return _openrk.Solver_getTemperature(self, time)

    def getFlux(self, time):
        return _openrk.Solver_getFlux(self, time)

    def getShape(self, time):
        return _openrk.Solver_getShape(self, time)

    def getAmplitude(self, time):
        return _openrk.Solver_getAmplitude(self, time)

    def getPower(self, time):
        return _openrk.Solver_getPower(self, time)

    def getCurrent(self, time):
        return _openrk.Solver_getCurrent(self, time)

    def getDifLinear(self, time):
        return _openrk.Solver_getDifLinear(self, time)

    def getDifNonlinear(self, time):
        return _openrk.Solver_getDifNonlinear(self, time)

    def getFrequency(self, time):
        return _openrk.Solver_getFrequency(self, time)

    def getTemperatureByValue(self, cell, time):
        return _openrk.Solver_getTemperatureByValue(self, cell, time)

    def getFluxByValue(self, cell, group, time):
        return _openrk.Solver_getFluxByValue(self, cell, group, time)

    def getShapeByValue(self, cell, group, time):
        return _openrk.Solver_getShapeByValue(self, cell, group, time)

    def getAmplitudeByValue(self, cell, group, time):
        return _openrk.Solver_getAmplitudeByValue(self, cell, group, time)

    def getPowerByValue(self, cell, time):
        return _openrk.Solver_getPowerByValue(self, cell, time)

    def getCurrentByValue(self, cell, group, side, time):
        return _openrk.Solver_getCurrentByValue(self, cell, group, side, time)

    def getDifLinearByValue(self, cell, group, side, time):
        return _openrk.Solver_getDifLinearByValue(self, cell, group, side, time)

    def getDifNonlinearByValue(self, cell, group, side, time):
        return _openrk.Solver_getDifNonlinearByValue(self, cell, group, side, time)

    def getFrequencyByValue(self, cell, group, time):
        return _openrk.Solver_getFrequencyByValue(self, cell, group, time)

    def setMethod(self, method):
        return _openrk.Solver_setMethod(self, method)

    def setEndTime(self, time):
        return _openrk.Solver_setEndTime(self, time)

    def setInnerTimeStepSize(self, time):
        return _openrk.Solver_setInnerTimeStepSize(self, time)

    def setOuterTimeStepSize(self, time):
        return _openrk.Solver_setOuterTimeStepSize(self, time)

    def setBuckling(self, buckling):
        return _openrk.Solver_setBuckling(self, buckling)

    def setInitialPower(self, power):
        return _openrk.Solver_setInitialPower(self, power)

    def setTemperatureByValue(self, value, cell, time):
        return _openrk.Solver_setTemperatureByValue(self, value, cell, time)

    def setShapeByValue(self, value, cell, group, time):
        return _openrk.Solver_setShapeByValue(self, value, cell, group, time)

    def setAmplitudeByValue(self, value, cell, group, time):
        return _openrk.Solver_setAmplitudeByValue(self, value, cell, group, time)

    def setPowerByValue(self, value, cell, time):
        return _openrk.Solver_setPowerByValue(self, value, cell, time)

    def setFrequencyByValue(self, value, cell, group, time):
        return _openrk.Solver_setFrequencyByValue(self, value, cell, group, time)

    def setCurrentByValue(self, value, cell, group, side, time):
        return _openrk.Solver_setCurrentByValue(self, value, cell, group, side, time)

    def setFluxByValue(self, value, cell, group, time):
        return _openrk.Solver_setFluxByValue(self, value, cell, group, time)

    def setDifLinearByValue(self, value, cell, group, side, time):
        return _openrk.Solver_setDifLinearByValue(self, value, cell, group, side, time)

    def setDifNonlinearByValue(self, value, cell, group, side, time):
        return _openrk.Solver_setDifNonlinearByValue(self, value, cell, group, side, time)

    def generateAmplitudeMatrix(self, wt):
        return _openrk.Solver_generateAmplitudeMatrix(self, wt)

    def integratePrecursorConcentrations(self, time_from, time_to):
        return _openrk.Solver_integratePrecursorConcentrations(self, time_from, time_to)

    def integrateTemperature(self, time_from, time_to):
        return _openrk.Solver_integrateTemperature(self, time_from, time_to)

    def interpolateShape(self, time, time_forward, time_backward):
        return _openrk.Solver_interpolateShape(self, time, time_forward, time_backward)

    def interpolateDifNonlinear(self, time, time_forward, time_backward):
        return _openrk.Solver_interpolateDifNonlinear(self, time, time_forward, time_backward)

    def computeDiffusionCoefficients(self, time):
        return _openrk.Solver_computeDiffusionCoefficients(self, time)

    def reconstructFlux(self, time, time_shape, time_amp):
        return _openrk.Solver_reconstructFlux(self, time, time_shape, time_amp)

    def computeShape(self, time, time_flux, time_amp):
        return _openrk.Solver_computeShape(self, time, time_flux, time_amp)

    def computeFrequency(self):
        return _openrk.Solver_computeFrequency(self)

    def computeInitialPrecursorConcentrations(self):
        return _openrk.Solver_computeInitialPrecursorConcentrations(self)

    def computePower(self, time):
        return _openrk.Solver_computePower(self, time)

    def computeAveragePower(self, time):
        return _openrk.Solver_computeAveragePower(self, time)

    def computePowerRMSError(self, time_1, time_2):
        return _openrk.Solver_computePowerRMSError(self, time_1, time_2)

    def normalizeFlux(self):
        return _openrk.Solver_normalizeFlux(self)

    def initializeClock(self):
        return _openrk.Solver_initializeClock(self)

    def takeInnerStep(self):
        return _openrk.Solver_takeInnerStep(self)

    def takeOuterStep(self):
        return _openrk.Solver_takeOuterStep(self)

    def takeOuterStepOnly(self):
        return _openrk.Solver_takeOuterStepOnly(self)

    def computeInitialShape(self, tol):
        return _openrk.Solver_computeInitialShape(self, tol)

    def copyPrecursors(self, time_from, time_to):
        return _openrk.Solver_copyPrecursors(self, time_from, time_to)

    def copyFieldVariables(self, time_from, time_to):
        return _openrk.Solver_copyFieldVariables(self, time_from, time_to)

    def broadcastToAll(self, time_from):
        return _openrk.Solver_broadcastToAll(self, time_from)
Solver_swigregister = _openrk.Solver_swigregister
Solver_swigregister(Solver)

class SolverDiffusion(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverDiffusion, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolverDiffusion, name)
    __repr__ = _swig_repr

    def __init__(self, geometry):
        this = _openrk.new_SolverDiffusion(geometry)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openrk.delete_SolverDiffusion
    __del__ = lambda self: None

    def getShapeAMatrix(self):
        return _openrk.SolverDiffusion_getShapeAMatrix(self)

    def getShapeMMatrix(self):
        return _openrk.SolverDiffusion_getShapeMMatrix(self)

    def getShapeAMMatrix(self):
        return _openrk.SolverDiffusion_getShapeAMMatrix(self)

    def getShapeSource(self):
        return _openrk.SolverDiffusion_getShapeSource(self)

    def getDifLinearFine(self, time):
        return _openrk.SolverDiffusion_getDifLinearFine(self, time)

    def getDifLinearFineByValue(self, cell, group, side, time):
        return _openrk.SolverDiffusion_getDifLinearFineByValue(self, cell, group, side, time)

    def setDifLinearFineByValue(self, value, cell, group, side, time):
        return _openrk.SolverDiffusion_setDifLinearFineByValue(self, value, cell, group, side, time)

    def takeInnerStep(self):
        return _openrk.SolverDiffusion_takeInnerStep(self)

    def takeOuterStep(self):
        return _openrk.SolverDiffusion_takeOuterStep(self)

    def takeOuterStepOnly(self):
        return _openrk.SolverDiffusion_takeOuterStepOnly(self)

    def computeInitialShape(self, tol):
        return _openrk.SolverDiffusion_computeInitialShape(self, tol)

    def generateShapeMatrices(self, wt):
        return _openrk.SolverDiffusion_generateShapeMatrices(self, wt)

    def computeDiffusionCoefficientsFine(self, time):
        return _openrk.SolverDiffusion_computeDiffusionCoefficientsFine(self, time)

    def generateInitialShapeMatrices(self):
        return _openrk.SolverDiffusion_generateInitialShapeMatrices(self)

    def generateAmpCurrent(self, time):
        return _openrk.SolverDiffusion_generateAmpCurrent(self, time)
SolverDiffusion_swigregister = _openrk.SolverDiffusion_swigregister
SolverDiffusion_swigregister(SolverDiffusion)

# This file is compatible with both classic and new-style classes.


