# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openrk', [dirname(__file__)])
        except ImportError:
            import _openrk
            return _openrk
        if fp is not None:
            try:
                _mod = imp.load_module('_openrk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openrk = swig_import_helper()
    del swig_import_helper
else:
    import _openrk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def fact(*args, **kwargs):
  return _openrk.fact(*args, **kwargs)
fact = _openrk.fact

def rms(*args, **kwargs):
  return _openrk.rms(*args, **kwargs)
rms = _openrk.rms

def eigenvalueSolve(*args, **kwargs):
  return _openrk.eigenvalueSolve(*args, **kwargs)
eigenvalueSolve = _openrk.eigenvalueSolve

def linearSolve(*args, **kwargs):
  return _openrk.linearSolve(*args, **kwargs)
linearSolve = _openrk.linearSolve

def vector_copy(*args, **kwargs):
  return _openrk.vector_copy(*args, **kwargs)
vector_copy = _openrk.vector_copy

def matrix_zero(*args, **kwargs):
  return _openrk.matrix_zero(*args, **kwargs)
matrix_zero = _openrk.matrix_zero

def vector_zero(*args, **kwargs):
  return _openrk.vector_zero(*args, **kwargs)
vector_zero = _openrk.vector_zero

def matrix_multiplication(*args, **kwargs):
  return _openrk.matrix_multiplication(*args, **kwargs)
matrix_multiplication = _openrk.matrix_multiplication

def vector_scale(*args, **kwargs):
  return _openrk.vector_scale(*args, **kwargs)
vector_scale = _openrk.vector_scale

def setNumThreads(*args, **kwargs):
  return _openrk.setNumThreads(*args, **kwargs)
setNumThreads = _openrk.setNumThreads
DEBUG = _openrk.DEBUG
INFO = _openrk.INFO
NORMAL = _openrk.NORMAL
SEPARATOR = _openrk.SEPARATOR
HEADER = _openrk.HEADER
TITLE = _openrk.TITLE
WARNING = _openrk.WARNING
CRITICAL = _openrk.CRITICAL
RESULT = _openrk.RESULT
UNITTEST = _openrk.UNITTEST
ERROR = _openrk.ERROR

def set_err(*args, **kwargs):
  return _openrk.set_err(*args, **kwargs)
set_err = _openrk.set_err

def set_output_directory(*args, **kwargs):
  return _openrk.set_output_directory(*args, **kwargs)
set_output_directory = _openrk.set_output_directory

def get_output_directory():
  return _openrk.get_output_directory()
get_output_directory = _openrk.get_output_directory

def set_log_filename(*args, **kwargs):
  return _openrk.set_log_filename(*args, **kwargs)
set_log_filename = _openrk.set_log_filename

def get_log_filename():
  return _openrk.get_log_filename()
get_log_filename = _openrk.get_log_filename

def set_separator_character(*args, **kwargs):
  return _openrk.set_separator_character(*args, **kwargs)
set_separator_character = _openrk.set_separator_character

def get_separator_character():
  return _openrk.get_separator_character()
get_separator_character = _openrk.get_separator_character

def set_header_character(*args, **kwargs):
  return _openrk.set_header_character(*args, **kwargs)
set_header_character = _openrk.set_header_character

def get_header_character():
  return _openrk.get_header_character()
get_header_character = _openrk.get_header_character

def set_title_character(*args, **kwargs):
  return _openrk.set_title_character(*args, **kwargs)
set_title_character = _openrk.set_title_character

def get_title_character():
  return _openrk.get_title_character()
get_title_character = _openrk.get_title_character

def set_line_length(*args, **kwargs):
  return _openrk.set_line_length(*args, **kwargs)
set_line_length = _openrk.set_line_length

def set_log_level(*args, **kwargs):
  return _openrk.set_log_level(*args, **kwargs)
set_log_level = _openrk.set_log_level

def get_log_level():
  return _openrk.get_log_level()
get_log_level = _openrk.get_log_level

def log_printf(*args, **kwargs):
  return _openrk.log_printf(*args, **kwargs)
log_printf = _openrk.log_printf

def create_multiline_msg(*args, **kwargs):
  return _openrk.create_multiline_msg(*args, **kwargs)
create_multiline_msg = _openrk.create_multiline_msg
# This file is compatible with both classic and new-style classes.


