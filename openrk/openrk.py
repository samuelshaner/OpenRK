# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_openrk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_openrk')
    _openrk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openrk', [dirname(__file__)])
        except ImportError:
            import _openrk
            return _openrk
        if fp is not None:
            try:
                _mod = imp.load_module('_openrk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openrk = swig_import_helper()
    del swig_import_helper
else:
    import _openrk
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

DEBUG = _openrk.DEBUG
INFO = _openrk.INFO
NORMAL = _openrk.NORMAL
SEPARATOR = _openrk.SEPARATOR
HEADER = _openrk.HEADER
TITLE = _openrk.TITLE
WARNING = _openrk.WARNING
CRITICAL = _openrk.CRITICAL
RESULT = _openrk.RESULT
UNITTEST = _openrk.UNITTEST
ERROR = _openrk.ERROR

def set_err(msg):
    return _openrk.set_err(msg)
set_err = _openrk.set_err

def set_output_directory(directory):
    return _openrk.set_output_directory(directory)
set_output_directory = _openrk.set_output_directory

def get_output_directory():
    return _openrk.get_output_directory()
get_output_directory = _openrk.get_output_directory

def set_log_filename(filename):
    return _openrk.set_log_filename(filename)
set_log_filename = _openrk.set_log_filename

def get_log_filename():
    return _openrk.get_log_filename()
get_log_filename = _openrk.get_log_filename

def set_separator_character(c):
    return _openrk.set_separator_character(c)
set_separator_character = _openrk.set_separator_character

def get_separator_character():
    return _openrk.get_separator_character()
get_separator_character = _openrk.get_separator_character

def set_header_character(c):
    return _openrk.set_header_character(c)
set_header_character = _openrk.set_header_character

def get_header_character():
    return _openrk.get_header_character()
get_header_character = _openrk.get_header_character

def set_title_character(c):
    return _openrk.set_title_character(c)
set_title_character = _openrk.set_title_character

def get_title_character():
    return _openrk.get_title_character()
get_title_character = _openrk.get_title_character

def set_line_length(length):
    return _openrk.set_line_length(length)
set_line_length = _openrk.set_line_length

def set_log_level(new_level):
    return _openrk.set_log_level(new_level)
set_log_level = _openrk.set_log_level

def get_log_level():
    return _openrk.get_log_level()
get_log_level = _openrk.get_log_level

def log_printf(level, format):
    return _openrk.log_printf(level, format)
log_printf = _openrk.log_printf

def create_multiline_msg(level, message):
    return _openrk.create_multiline_msg(level, message)
create_multiline_msg = _openrk.create_multiline_msg
class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr

    def __init__(self, dimensions):
        this = _openrk.new_Array(dimensions)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openrk.delete_Array
    __del__ = lambda self: None

    def clear(self):
        return _openrk.Array_clear(self)

    def scaleByValue(self, val):
        return _openrk.Array_scaleByValue(self, val)

    def printString(self):
        return _openrk.Array_printString(self)

    def copyTo(self, array):
        return _openrk.Array_copyTo(self, array)

    def tile(self, factor):
        return _openrk.Array_tile(self, factor)

    def repeat(self, factor):
        return _openrk.Array_repeat(self, factor)

    def sumAxis(self, axis):
        return _openrk.Array_sumAxis(self, axis)

    def copy(self):
        return _openrk.Array_copy(self)

    def multiply(self, array, result=None):
        return _openrk.Array_multiply(self, array, result)

    def divide(self, array, result=None):
        return _openrk.Array_divide(self, array, result)

    def add(self, array, result=None):
        return _openrk.Array_add(self, array, result)

    def subtract(self, array, result=None):
        return _openrk.Array_subtract(self, array, result)

    def reverseAxis(self, axis):
        return _openrk.Array_reverseAxis(self, axis)

    def incrementValue(self, index, value):
        return _openrk.Array_incrementValue(self, index, value)

    def reshape(self, dimensions):
        return _openrk.Array_reshape(self, dimensions)

    def flatten(self):
        return _openrk.Array_flatten(self)

    def fillWithRandom(self):
        return _openrk.Array_fillWithRandom(self)

    def outputValues(self, np_array):
        return _openrk.Array_outputValues(self, np_array)

    def sum(self):
        return _openrk.Array_sum(self)

    def getValue(self, dimensions):
        return _openrk.Array_getValue(self, dimensions)

    def getValues(self):
        return _openrk.Array_getValues(self)

    def getNumDimensions(self):
        return _openrk.Array_getNumDimensions(self)

    def getShape(self, dimension):
        return _openrk.Array_getShape(self, dimension)

    def getSize(self):
        return _openrk.Array_getSize(self)

    def getIndex(self, dimensions):
        return _openrk.Array_getIndex(self, dimensions)

    def getIndices(self, index, indices):
        return _openrk.Array_getIndices(self, index, indices)

    def setDimensions(self, dimensions):
        return _openrk.Array_setDimensions(self, dimensions)

    def setValue(self, index, value):
        return _openrk.Array_setValue(self, index, value)

    def setValues(self, values):
        return _openrk.Array_setValues(self, values)

    def setAll(self, val):
        return _openrk.Array_setAll(self, val)
Array_swigregister = _openrk.Array_swigregister
Array_swigregister(Array)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, num_cells=1):
        this = _openrk.new_Matrix(num_cells)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openrk.delete_Matrix
    __del__ = lambda self: None

    def incrementValue(self, col, row, value):
        return _openrk.Matrix_incrementValue(self, col, row, value)

    def clear(self):
        return _openrk.Matrix_clear(self)

    def printString(self):
        return _openrk.Matrix_printString(self)

    def transpose(self):
        return _openrk.Matrix_transpose(self)

    def diags(self, array):
        return _openrk.Matrix_diags(self, array)

    def blockDiags(self, array, block_size):
        return _openrk.Matrix_blockDiags(self, array, block_size)

    def scaleByValue(self, val):
        return _openrk.Matrix_scaleByValue(self, val)

    def fillWithRandom(self):
        return _openrk.Matrix_fillWithRandom(self)

    def generateDiag(self):
        return _openrk.Matrix_generateDiag(self)

    def getValue(self, col, row):
        return _openrk.Matrix_getValue(self, col, row)

    def getA(self):
        return _openrk.Matrix_getA(self)

    def getIA(self):
        return _openrk.Matrix_getIA(self)

    def getJA(self):
        return _openrk.Matrix_getJA(self)

    def getDiag(self):
        return _openrk.Matrix_getDiag(self)

    def getNumCells(self):
        return _openrk.Matrix_getNumCells(self)

    def getNNZ(self):
        return _openrk.Matrix_getNNZ(self)

    def setValue(self, col, row, value):
        return _openrk.Matrix_setValue(self, col, row, value)

    def setDiags(self, diags):
        return _openrk.Matrix_setDiags(self, diags)

    def setA(self, values):
        return _openrk.Matrix_setA(self, values)

    def setIA(self, values):
        return _openrk.Matrix_setIA(self, values)

    def setJA(self, values):
        return _openrk.Matrix_setJA(self, values)
Matrix_swigregister = _openrk.Matrix_swigregister
Matrix_swigregister(Matrix)


def eigenvalueSolve(A, M, X, tol, SOR_factor=1.5):
    return _openrk.eigenvalueSolve(A, M, X, tol, SOR_factor)
eigenvalueSolve = _openrk.eigenvalueSolve

def linearSolve(A, M, B, X=None, tol=1.e-6, SOR_factor=1.5):
    return _openrk.linearSolve(A, M, B, X, tol, SOR_factor)
linearSolve = _openrk.linearSolve

def matrixMultiplication(A, X, B=None):
    return _openrk.matrixMultiplication(A, X, B)
matrixMultiplication = _openrk.matrixMultiplication

def computeRMSE(x, y):
    return _openrk.computeRMSE(x, y)
computeRMSE = _openrk.computeRMSE

def setNumThreads(num_threads):
    return _openrk.setNumThreads(num_threads)
setNumThreads = _openrk.setNumThreads
# This file is compatible with both classic and new-style classes.


