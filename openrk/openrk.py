# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openrk', [dirname(__file__)])
        except ImportError:
            import _openrk
            return _openrk
        if fp is not None:
            try:
                _mod = imp.load_module('_openrk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openrk = swig_import_helper()
    del swig_import_helper
else:
    import _openrk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def eigenvalueSolve(*args, **kwargs):
  return _openrk.eigenvalueSolve(*args, **kwargs)
eigenvalueSolve = _openrk.eigenvalueSolve

def eigenvalueSolve2d(*args, **kwargs):
  return _openrk.eigenvalueSolve2d(*args, **kwargs)
eigenvalueSolve2d = _openrk.eigenvalueSolve2d

def linearSolve(*args, **kwargs):
  return _openrk.linearSolve(*args, **kwargs)
linearSolve = _openrk.linearSolve

def linearSolve2d(*args, **kwargs):
  return _openrk.linearSolve2d(*args, **kwargs)
linearSolve2d = _openrk.linearSolve2d

def matrix_multiplication(*args, **kwargs):
  return _openrk.matrix_multiplication(*args, **kwargs)
matrix_multiplication = _openrk.matrix_multiplication

def matrix_multiplication2d(*args, **kwargs):
  return _openrk.matrix_multiplication2d(*args, **kwargs)
matrix_multiplication2d = _openrk.matrix_multiplication2d

def vector_scale(*args, **kwargs):
  return _openrk.vector_scale(*args, **kwargs)
vector_scale = _openrk.vector_scale

def setNumThreads(*args, **kwargs):
  return _openrk.setNumThreads(*args, **kwargs)
setNumThreads = _openrk.setNumThreads

def matMultA(*args, **kwargs):
  return _openrk.matMultA(*args, **kwargs)
matMultA = _openrk.matMultA
DEBUG = _openrk.DEBUG
INFO = _openrk.INFO
NORMAL = _openrk.NORMAL
SEPARATOR = _openrk.SEPARATOR
HEADER = _openrk.HEADER
TITLE = _openrk.TITLE
WARNING = _openrk.WARNING
CRITICAL = _openrk.CRITICAL
RESULT = _openrk.RESULT
UNITTEST = _openrk.UNITTEST
ERROR = _openrk.ERROR

def set_err(*args, **kwargs):
  return _openrk.set_err(*args, **kwargs)
set_err = _openrk.set_err

def set_output_directory(*args, **kwargs):
  return _openrk.set_output_directory(*args, **kwargs)
set_output_directory = _openrk.set_output_directory

def get_output_directory():
  return _openrk.get_output_directory()
get_output_directory = _openrk.get_output_directory

def set_log_filename(*args, **kwargs):
  return _openrk.set_log_filename(*args, **kwargs)
set_log_filename = _openrk.set_log_filename

def get_log_filename():
  return _openrk.get_log_filename()
get_log_filename = _openrk.get_log_filename

def set_separator_character(*args, **kwargs):
  return _openrk.set_separator_character(*args, **kwargs)
set_separator_character = _openrk.set_separator_character

def get_separator_character():
  return _openrk.get_separator_character()
get_separator_character = _openrk.get_separator_character

def set_header_character(*args, **kwargs):
  return _openrk.set_header_character(*args, **kwargs)
set_header_character = _openrk.set_header_character

def get_header_character():
  return _openrk.get_header_character()
get_header_character = _openrk.get_header_character

def set_title_character(*args, **kwargs):
  return _openrk.set_title_character(*args, **kwargs)
set_title_character = _openrk.set_title_character

def get_title_character():
  return _openrk.get_title_character()
get_title_character = _openrk.get_title_character

def set_line_length(*args, **kwargs):
  return _openrk.set_line_length(*args, **kwargs)
set_line_length = _openrk.set_line_length

def set_log_level(*args, **kwargs):
  return _openrk.set_log_level(*args, **kwargs)
set_log_level = _openrk.set_log_level

def get_log_level():
  return _openrk.get_log_level()
get_log_level = _openrk.get_log_level

def log_printf(*args, **kwargs):
  return _openrk.log_printf(*args, **kwargs)
log_printf = _openrk.log_printf

def create_multiline_msg(*args, **kwargs):
  return _openrk.create_multiline_msg(*args, **kwargs)
create_multiline_msg = _openrk.create_multiline_msg

def material_id():
  return _openrk.material_id()
material_id = _openrk.material_id
class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, id=0): 
        this = _openrk.new_Material(id)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_Material
    __del__ = lambda self : None;
    def setNumEnergyGroups(self, *args, **kwargs): return _openrk.Material_setNumEnergyGroups(self, *args, **kwargs)
    def setNumDelayedGroups(self, *args, **kwargs): return _openrk.Material_setNumDelayedGroups(self, *args, **kwargs)
    def setEnergyPerFission(self, *args, **kwargs): return _openrk.Material_setEnergyPerFission(self, *args, **kwargs)
    def setSigmaT(self, *args, **kwargs): return _openrk.Material_setSigmaT(self, *args, **kwargs)
    def setSigmaA(self, *args, **kwargs): return _openrk.Material_setSigmaA(self, *args, **kwargs)
    def setSigmaS(self, *args, **kwargs): return _openrk.Material_setSigmaS(self, *args, **kwargs)
    def setSigmaF(self, *args, **kwargs): return _openrk.Material_setSigmaF(self, *args, **kwargs)
    def setNuSigmaF(self, *args, **kwargs): return _openrk.Material_setNuSigmaF(self, *args, **kwargs)
    def setChi(self, *args, **kwargs): return _openrk.Material_setChi(self, *args, **kwargs)
    def setDifCoef(self, *args, **kwargs): return _openrk.Material_setDifCoef(self, *args, **kwargs)
    def setVelocity(self, *args, **kwargs): return _openrk.Material_setVelocity(self, *args, **kwargs)
    def setPrecursorConc(self, *args, **kwargs): return _openrk.Material_setPrecursorConc(self, *args, **kwargs)
    def setSigmaTByGroup(self, *args, **kwargs): return _openrk.Material_setSigmaTByGroup(self, *args, **kwargs)
    def setSigmaAByGroup(self, *args, **kwargs): return _openrk.Material_setSigmaAByGroup(self, *args, **kwargs)
    def setSigmaFByGroup(self, *args, **kwargs): return _openrk.Material_setSigmaFByGroup(self, *args, **kwargs)
    def setNuSigmaFByGroup(self, *args, **kwargs): return _openrk.Material_setNuSigmaFByGroup(self, *args, **kwargs)
    def setSigmaSByGroup(self, *args, **kwargs): return _openrk.Material_setSigmaSByGroup(self, *args, **kwargs)
    def setChiByGroup(self, *args, **kwargs): return _openrk.Material_setChiByGroup(self, *args, **kwargs)
    def setDifCoefByGroup(self, *args, **kwargs): return _openrk.Material_setDifCoefByGroup(self, *args, **kwargs)
    def setVelocityByGroup(self, *args, **kwargs): return _openrk.Material_setVelocityByGroup(self, *args, **kwargs)
    def setPrecursorConcByGroup(self, *args, **kwargs): return _openrk.Material_setPrecursorConcByGroup(self, *args, **kwargs)
    def setTemperatureConversionFactor(self, *args, **kwargs): return _openrk.Material_setTemperatureConversionFactor(self, *args, **kwargs)
    def setDecayConstantByGroup(self, *args, **kwargs): return _openrk.Material_setDecayConstantByGroup(self, *args, **kwargs)
    def setDelayedFractionByGroup(self, *args, **kwargs): return _openrk.Material_setDelayedFractionByGroup(self, *args, **kwargs)
    def setClock(self, *args, **kwargs): return _openrk.Material_setClock(self, *args, **kwargs)
    def getId(self): return _openrk.Material_getId(self)
    def getNumEnergyGroups(self): return _openrk.Material_getNumEnergyGroups(self)
    def getNumDelayedGroups(self): return _openrk.Material_getNumDelayedGroups(self)
    def getEnergyPerFission(self): return _openrk.Material_getEnergyPerFission(self)
    def getSigmaT(self): return _openrk.Material_getSigmaT(self)
    def getSigmaA(self): return _openrk.Material_getSigmaA(self)
    def getSigmaS(self): return _openrk.Material_getSigmaS(self)
    def getSigmaF(self): return _openrk.Material_getSigmaF(self)
    def getNuSigmaF(self): return _openrk.Material_getNuSigmaF(self)
    def getChi(self): return _openrk.Material_getChi(self)
    def getDifCoef(self): return _openrk.Material_getDifCoef(self)
    def getVelocity(self): return _openrk.Material_getVelocity(self)
    def getPrecursorConc(self): return _openrk.Material_getPrecursorConc(self)
    def getDecayConstant(self): return _openrk.Material_getDecayConstant(self)
    def getDelayedFraction(self): return _openrk.Material_getDelayedFraction(self)
    def getSigmaTByGroup(self, *args, **kwargs): return _openrk.Material_getSigmaTByGroup(self, *args, **kwargs)
    def getSigmaAByGroup(self, *args, **kwargs): return _openrk.Material_getSigmaAByGroup(self, *args, **kwargs)
    def getSigmaSByGroup(self, *args, **kwargs): return _openrk.Material_getSigmaSByGroup(self, *args, **kwargs)
    def getSigmaFByGroup(self, *args, **kwargs): return _openrk.Material_getSigmaFByGroup(self, *args, **kwargs)
    def getNuSigmaFByGroup(self, *args, **kwargs): return _openrk.Material_getNuSigmaFByGroup(self, *args, **kwargs)
    def getChiByGroup(self, *args, **kwargs): return _openrk.Material_getChiByGroup(self, *args, **kwargs)
    def getDifCoefByGroup(self, *args, **kwargs): return _openrk.Material_getDifCoefByGroup(self, *args, **kwargs)
    def getVelocityByGroup(self, *args, **kwargs): return _openrk.Material_getVelocityByGroup(self, *args, **kwargs)
    def getPrecursorConcByGroup(self, *args, **kwargs): return _openrk.Material_getPrecursorConcByGroup(self, *args, **kwargs)
    def getDecayConstantByGroup(self, *args, **kwargs): return _openrk.Material_getDecayConstantByGroup(self, *args, **kwargs)
    def getDelayedFractionByGroup(self, *args, **kwargs): return _openrk.Material_getDelayedFractionByGroup(self, *args, **kwargs)
    def getDelayedFractionTotal(self, *args, **kwargs): return _openrk.Material_getDelayedFractionTotal(self, *args, **kwargs)
    def getTemperatureConversionFactor(self): return _openrk.Material_getTemperatureConversionFactor(self)
    def isFissionable(self): return _openrk.Material_isFissionable(self)
    def toString(self): return _openrk.Material_toString(self)
    def printString(self): return _openrk.Material_printString(self)
    def clone(self): return _openrk.Material_clone(self)
    def copy(self, *args, **kwargs): return _openrk.Material_copy(self, *args, **kwargs)
Material_swigregister = _openrk.Material_swigregister
Material_swigregister(Material)

class FunctionalMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionalMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionalMaterial, name)
    __repr__ = _swig_repr
    def __init__(self, id=0): 
        this = _openrk.new_FunctionalMaterial(id)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_FunctionalMaterial
    __del__ = lambda self : None;
    def setNumEnergyGroups(self, *args, **kwargs): return _openrk.FunctionalMaterial_setNumEnergyGroups(self, *args, **kwargs)
    def setTimeSteps(self, *args, **kwargs): return _openrk.FunctionalMaterial_setTimeSteps(self, *args, **kwargs)
    def setSigmaT(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaT(self, *args, **kwargs)
    def setSigmaA(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaA(self, *args, **kwargs)
    def setSigmaS(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaS(self, *args, **kwargs)
    def setSigmaF(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaF(self, *args, **kwargs)
    def setNuSigmaF(self, *args, **kwargs): return _openrk.FunctionalMaterial_setNuSigmaF(self, *args, **kwargs)
    def setChi(self, *args, **kwargs): return _openrk.FunctionalMaterial_setChi(self, *args, **kwargs)
    def setDifCoef(self, *args, **kwargs): return _openrk.FunctionalMaterial_setDifCoef(self, *args, **kwargs)
    def setVelocity(self, *args, **kwargs): return _openrk.FunctionalMaterial_setVelocity(self, *args, **kwargs)
    def setDopplerCoefficients(self, *args, **kwargs): return _openrk.FunctionalMaterial_setDopplerCoefficients(self, *args, **kwargs)
    def setSigmaTByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaTByGroup(self, *args, **kwargs)
    def setSigmaAByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaAByGroup(self, *args, **kwargs)
    def setSigmaFByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaFByGroup(self, *args, **kwargs)
    def setNuSigmaFByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setNuSigmaFByGroup(self, *args, **kwargs)
    def setSigmaSByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setSigmaSByGroup(self, *args, **kwargs)
    def setChiByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setChiByGroup(self, *args, **kwargs)
    def setDifCoefByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setDifCoefByGroup(self, *args, **kwargs)
    def setVelocityByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_setVelocityByGroup(self, *args, **kwargs)
    def getSigmaTByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getSigmaTByGroup(self, *args, **kwargs)
    def getSigmaAByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getSigmaAByGroup(self, *args, **kwargs)
    def getSigmaSByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getSigmaSByGroup(self, *args, **kwargs)
    def getSigmaFByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getSigmaFByGroup(self, *args, **kwargs)
    def getNuSigmaFByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getNuSigmaFByGroup(self, *args, **kwargs)
    def getChiByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getChiByGroup(self, *args, **kwargs)
    def getDifCoefByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getDifCoefByGroup(self, *args, **kwargs)
    def getVelocityByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getVelocityByGroup(self, *args, **kwargs)
    def getDopplerCoefficientByGroup(self, *args, **kwargs): return _openrk.FunctionalMaterial_getDopplerCoefficientByGroup(self, *args, **kwargs)
    def getTimeStep(self, *args, **kwargs): return _openrk.FunctionalMaterial_getTimeStep(self, *args, **kwargs)
    def toString(self): return _openrk.FunctionalMaterial_toString(self)
    def clone(self): return _openrk.FunctionalMaterial_clone(self)
    def copy(self, *args, **kwargs): return _openrk.FunctionalMaterial_copy(self, *args, **kwargs)
FunctionalMaterial_swigregister = _openrk.FunctionalMaterial_swigregister
FunctionalMaterial_swigregister(FunctionalMaterial)

START = _openrk.START
PREVIOUS_OUT = _openrk.PREVIOUS_OUT
PREVIOUS_IN = _openrk.PREVIOUS_IN
CURRENT = _openrk.CURRENT
FORWARD_IN_OLD = _openrk.FORWARD_IN_OLD
FORWARD_OUT = _openrk.FORWARD_OUT
FORWARD_OUT_OLD = _openrk.FORWARD_OUT_OLD
END = _openrk.END
class Clock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clock, name)
    __repr__ = _swig_repr
    def __init__(self, start_time=0.0, end_time=3.0, dt_outer=1.e-1, dt_inner=1.e-2): 
        this = _openrk.new_Clock(start_time, end_time, dt_outer, dt_inner)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_Clock
    __del__ = lambda self : None;
    def getTime(self, *args, **kwargs): return _openrk.Clock_getTime(self, *args, **kwargs)
    def getDtInner(self): return _openrk.Clock_getDtInner(self)
    def getDtOuter(self): return _openrk.Clock_getDtOuter(self)
    def getPositionName(self, *args, **kwargs): return _openrk.Clock_getPositionName(self, *args, **kwargs)
    def setDtOuter(self, *args, **kwargs): return _openrk.Clock_setDtOuter(self, *args, **kwargs)
    def setDtInner(self, *args, **kwargs): return _openrk.Clock_setDtInner(self, *args, **kwargs)
    def setTime(self, *args, **kwargs): return _openrk.Clock_setTime(self, *args, **kwargs)
    def setStartTime(self, *args, **kwargs): return _openrk.Clock_setStartTime(self, *args, **kwargs)
    def setEndTime(self, *args, **kwargs): return _openrk.Clock_setEndTime(self, *args, **kwargs)
    def takeInnerStep(self): return _openrk.Clock_takeInnerStep(self)
    def takeOuterStep(self): return _openrk.Clock_takeOuterStep(self)
    def resetToPreviousOuterStep(self): return _openrk.Clock_resetToPreviousOuterStep(self)
    def toString(self): return _openrk.Clock_toString(self)
    def printString(self): return _openrk.Clock_printString(self)
Clock_swigregister = _openrk.Clock_swigregister
Clock_swigregister(Clock)

IQS = _openrk.IQS
THETA = _openrk.THETA
class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openrk.delete_Solver
    __del__ = lambda self : None;
    def getAmpMatrix(self): return _openrk.Solver_getAmpMatrix(self)
    def getAmpSource(self): return _openrk.Solver_getAmpSource(self)
    def getKeff0(self): return _openrk.Solver_getKeff0(self)
    def getMethod(self): return _openrk.Solver_getMethod(self)
    def getBuckling(self): return _openrk.Solver_getBuckling(self)
    def getTemperature(self, *args, **kwargs): return _openrk.Solver_getTemperature(self, *args, **kwargs)
    def getFlux(self, *args, **kwargs): return _openrk.Solver_getFlux(self, *args, **kwargs)
    def getShape(self, *args, **kwargs): return _openrk.Solver_getShape(self, *args, **kwargs)
    def getAmplitude(self, *args, **kwargs): return _openrk.Solver_getAmplitude(self, *args, **kwargs)
    def getPower(self, *args, **kwargs): return _openrk.Solver_getPower(self, *args, **kwargs)
    def getCurrent(self, *args, **kwargs): return _openrk.Solver_getCurrent(self, *args, **kwargs)
    def getDifLinear(self, *args, **kwargs): return _openrk.Solver_getDifLinear(self, *args, **kwargs)
    def getDifNonlinear(self, *args, **kwargs): return _openrk.Solver_getDifNonlinear(self, *args, **kwargs)
    def getDifFrequency(self, *args, **kwargs): return _openrk.Solver_getDifFrequency(self, *args, **kwargs)
    def getFrequency(self, *args, **kwargs): return _openrk.Solver_getFrequency(self, *args, **kwargs)
    def getTemperatureByValue(self, *args, **kwargs): return _openrk.Solver_getTemperatureByValue(self, *args, **kwargs)
    def getFluxByValue(self, *args, **kwargs): return _openrk.Solver_getFluxByValue(self, *args, **kwargs)
    def getShapeByValue(self, *args, **kwargs): return _openrk.Solver_getShapeByValue(self, *args, **kwargs)
    def getAmplitudeByValue(self, *args, **kwargs): return _openrk.Solver_getAmplitudeByValue(self, *args, **kwargs)
    def getPowerByValue(self, *args, **kwargs): return _openrk.Solver_getPowerByValue(self, *args, **kwargs)
    def getCurrentByValue(self, *args, **kwargs): return _openrk.Solver_getCurrentByValue(self, *args, **kwargs)
    def getDifLinearByValue(self, *args, **kwargs): return _openrk.Solver_getDifLinearByValue(self, *args, **kwargs)
    def getDifNonlinearByValue(self, *args, **kwargs): return _openrk.Solver_getDifNonlinearByValue(self, *args, **kwargs)
    def getFrequencyByValue(self, *args, **kwargs): return _openrk.Solver_getFrequencyByValue(self, *args, **kwargs)
    def setMethod(self, *args, **kwargs): return _openrk.Solver_setMethod(self, *args, **kwargs)
    def setEndTime(self, *args, **kwargs): return _openrk.Solver_setEndTime(self, *args, **kwargs)
    def setInnerTimeStepSize(self, *args, **kwargs): return _openrk.Solver_setInnerTimeStepSize(self, *args, **kwargs)
    def setOuterTimeStepSize(self, *args, **kwargs): return _openrk.Solver_setOuterTimeStepSize(self, *args, **kwargs)
    def setBuckling(self, *args, **kwargs): return _openrk.Solver_setBuckling(self, *args, **kwargs)
    def setInitialPower(self, *args, **kwargs): return _openrk.Solver_setInitialPower(self, *args, **kwargs)
    def setTemperatureByValue(self, *args, **kwargs): return _openrk.Solver_setTemperatureByValue(self, *args, **kwargs)
    def setShapeByValue(self, *args, **kwargs): return _openrk.Solver_setShapeByValue(self, *args, **kwargs)
    def setAmplitudeByValue(self, *args, **kwargs): return _openrk.Solver_setAmplitudeByValue(self, *args, **kwargs)
    def setPowerByValue(self, *args, **kwargs): return _openrk.Solver_setPowerByValue(self, *args, **kwargs)
    def setFrequencyByValue(self, *args, **kwargs): return _openrk.Solver_setFrequencyByValue(self, *args, **kwargs)
    def setCurrentByValue(self, *args, **kwargs): return _openrk.Solver_setCurrentByValue(self, *args, **kwargs)
    def setFluxByValue(self, *args, **kwargs): return _openrk.Solver_setFluxByValue(self, *args, **kwargs)
    def setDifLinearByValue(self, *args, **kwargs): return _openrk.Solver_setDifLinearByValue(self, *args, **kwargs)
    def setDifNonlinearByValue(self, *args, **kwargs): return _openrk.Solver_setDifNonlinearByValue(self, *args, **kwargs)
    def generateAmplitudeMatrix(self, *args, **kwargs): return _openrk.Solver_generateAmplitudeMatrix(self, *args, **kwargs)
    def integratePrecursorConcentrations(self, *args, **kwargs): return _openrk.Solver_integratePrecursorConcentrations(self, *args, **kwargs)
    def integrateTemperature(self, *args, **kwargs): return _openrk.Solver_integrateTemperature(self, *args, **kwargs)
    def interpolateShape(self, *args, **kwargs): return _openrk.Solver_interpolateShape(self, *args, **kwargs)
    def interpolateDifNonlinear(self, *args, **kwargs): return _openrk.Solver_interpolateDifNonlinear(self, *args, **kwargs)
    def computeDiffusionCoefficients(self, *args, **kwargs): return _openrk.Solver_computeDiffusionCoefficients(self, *args, **kwargs)
    def reconstructFlux(self, *args, **kwargs): return _openrk.Solver_reconstructFlux(self, *args, **kwargs)
    def computeShape(self, *args, **kwargs): return _openrk.Solver_computeShape(self, *args, **kwargs)
    def computeFrequency(self): return _openrk.Solver_computeFrequency(self)
    def computeInitialPrecursorConcentrations(self): return _openrk.Solver_computeInitialPrecursorConcentrations(self)
    def computePower(self, *args, **kwargs): return _openrk.Solver_computePower(self, *args, **kwargs)
    def computeAveragePower(self, *args, **kwargs): return _openrk.Solver_computeAveragePower(self, *args, **kwargs)
    def computePowerRMSError(self, *args, **kwargs): return _openrk.Solver_computePowerRMSError(self, *args, **kwargs)
    def normalizeFlux(self): return _openrk.Solver_normalizeFlux(self)
    def takeInnerStep(self): return _openrk.Solver_takeInnerStep(self)
    def takeOuterStep(self): return _openrk.Solver_takeOuterStep(self)
    def takeOuterStepOnly(self): return _openrk.Solver_takeOuterStepOnly(self)
    def computeInitialShape(self): return _openrk.Solver_computeInitialShape(self)
    def copyTemperature(self, *args, **kwargs): return _openrk.Solver_copyTemperature(self, *args, **kwargs)
    def copyFlux(self, *args, **kwargs): return _openrk.Solver_copyFlux(self, *args, **kwargs)
    def copyShape(self, *args, **kwargs): return _openrk.Solver_copyShape(self, *args, **kwargs)
    def copyAmplitude(self, *args, **kwargs): return _openrk.Solver_copyAmplitude(self, *args, **kwargs)
    def copyPower(self, *args, **kwargs): return _openrk.Solver_copyPower(self, *args, **kwargs)
    def copyCurrent(self, *args, **kwargs): return _openrk.Solver_copyCurrent(self, *args, **kwargs)
    def copyDifLinear(self, *args, **kwargs): return _openrk.Solver_copyDifLinear(self, *args, **kwargs)
    def copyDifNonlinear(self, *args, **kwargs): return _openrk.Solver_copyDifNonlinear(self, *args, **kwargs)
    def copyFrequency(self, *args, **kwargs): return _openrk.Solver_copyFrequency(self, *args, **kwargs)
    def copyPrecursors(self, *args, **kwargs): return _openrk.Solver_copyPrecursors(self, *args, **kwargs)
    def copyFieldVariables(self, *args, **kwargs): return _openrk.Solver_copyFieldVariables(self, *args, **kwargs)
    def broadcastToAll(self, *args, **kwargs): return _openrk.Solver_broadcastToAll(self, *args, **kwargs)
Solver_swigregister = _openrk.Solver_swigregister
Solver_swigregister(Solver)

class SolverDiffusion(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverDiffusion, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolverDiffusion, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openrk.new_SolverDiffusion(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_SolverDiffusion
    __del__ = lambda self : None;
    def getShapeAMatrix(self): return _openrk.SolverDiffusion_getShapeAMatrix(self)
    def getShapeMMatrix(self): return _openrk.SolverDiffusion_getShapeMMatrix(self)
    def getShapeAMMatrix(self): return _openrk.SolverDiffusion_getShapeAMMatrix(self)
    def getShapeSource(self): return _openrk.SolverDiffusion_getShapeSource(self)
    def getDifLinearFine(self, *args, **kwargs): return _openrk.SolverDiffusion_getDifLinearFine(self, *args, **kwargs)
    def getDifLinearFineByValue(self, *args, **kwargs): return _openrk.SolverDiffusion_getDifLinearFineByValue(self, *args, **kwargs)
    def setDifLinearFineByValue(self, *args, **kwargs): return _openrk.SolverDiffusion_setDifLinearFineByValue(self, *args, **kwargs)
    def takeInnerStep(self): return _openrk.SolverDiffusion_takeInnerStep(self)
    def takeOuterStep(self): return _openrk.SolverDiffusion_takeOuterStep(self)
    def takeOuterStepOnly(self): return _openrk.SolverDiffusion_takeOuterStepOnly(self)
    def computeInitialShape(self): return _openrk.SolverDiffusion_computeInitialShape(self)
    def generateShapeMatrices(self): return _openrk.SolverDiffusion_generateShapeMatrices(self)
    def computeDiffusionCoefficientsFine(self, *args, **kwargs): return _openrk.SolverDiffusion_computeDiffusionCoefficientsFine(self, *args, **kwargs)
    def generateInitialShapeMatrices(self): return _openrk.SolverDiffusion_generateInitialShapeMatrices(self)
    def generateAmpCurrent(self, *args, **kwargs): return _openrk.SolverDiffusion_generateAmpCurrent(self, *args, **kwargs)
SolverDiffusion_swigregister = _openrk.SolverDiffusion_swigregister
SolverDiffusion_swigregister(SolverDiffusion)

REFLECTIVE = _openrk.REFLECTIVE
VACUUM = _openrk.VACUUM
class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self, width=1.0, height=1.0, depth=1.0): 
        this = _openrk.new_Geometry(width, height, depth)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_Geometry
    __del__ = lambda self : None;
    def setAmpMeshDimensions(self, num_x=1, num_y=1, num_z=1): return _openrk.Geometry_setAmpMeshDimensions(self, num_x, num_y, num_z)
    def setXMin(self, *args, **kwargs): return _openrk.Geometry_setXMin(self, *args, **kwargs)
    def setXMax(self, *args, **kwargs): return _openrk.Geometry_setXMax(self, *args, **kwargs)
    def setYMin(self, *args, **kwargs): return _openrk.Geometry_setYMin(self, *args, **kwargs)
    def setYMax(self, *args, **kwargs): return _openrk.Geometry_setYMax(self, *args, **kwargs)
    def setZMin(self, *args, **kwargs): return _openrk.Geometry_setZMin(self, *args, **kwargs)
    def setZMax(self, *args, **kwargs): return _openrk.Geometry_setZMax(self, *args, **kwargs)
    def setBoundary(self, *args, **kwargs): return _openrk.Geometry_setBoundary(self, *args, **kwargs)
    def setMaterial(self, *args, **kwargs): return _openrk.Geometry_setMaterial(self, *args, **kwargs)
    def setNumShapeCells(self, *args, **kwargs): return _openrk.Geometry_setNumShapeCells(self, *args, **kwargs)
    def getWidth(self): return _openrk.Geometry_getWidth(self)
    def getHeight(self): return _openrk.Geometry_getHeight(self)
    def getDepth(self): return _openrk.Geometry_getDepth(self)
    def getBoundary(self, *args, **kwargs): return _openrk.Geometry_getBoundary(self, *args, **kwargs)
    def getXMin(self): return _openrk.Geometry_getXMin(self)
    def getXMax(self): return _openrk.Geometry_getXMax(self)
    def getYMin(self): return _openrk.Geometry_getYMin(self)
    def getYMax(self): return _openrk.Geometry_getYMax(self)
    def getZMin(self): return _openrk.Geometry_getZMin(self)
    def getZMax(self): return _openrk.Geometry_getZMax(self)
    def getNumXAmp(self): return _openrk.Geometry_getNumXAmp(self)
    def getNumYAmp(self): return _openrk.Geometry_getNumYAmp(self)
    def getNumZAmp(self): return _openrk.Geometry_getNumZAmp(self)
    def getMaterial(self, *args, **kwargs): return _openrk.Geometry_getMaterial(self, *args, **kwargs)
    def getAmpToShapeMap(self): return _openrk.Geometry_getAmpToShapeMap(self)
    def getShapeToAmpMap(self): return _openrk.Geometry_getShapeToAmpMap(self)
    def getNumEnergyGroups(self): return _openrk.Geometry_getNumEnergyGroups(self)
    def getNumDelayedGroups(self): return _openrk.Geometry_getNumDelayedGroups(self)
    def getNeighborAmpCell(self, *args, **kwargs): return _openrk.Geometry_getNeighborAmpCell(self, *args, **kwargs)
    def getVolume(self, *args, **kwargs): return _openrk.Geometry_getVolume(self, *args, **kwargs)
    def getNumShapeCells(self): return _openrk.Geometry_getNumShapeCells(self)
    def getNumAmpCells(self): return _openrk.Geometry_getNumAmpCells(self)
    def addShapeCellToAmpCell(self, *args, **kwargs): return _openrk.Geometry_addShapeCellToAmpCell(self, *args, **kwargs)
    def findAmpCellContainingShapeCell(self, *args, **kwargs): return _openrk.Geometry_findAmpCellContainingShapeCell(self, *args, **kwargs)
    def uniquifyMaterials(self): return _openrk.Geometry_uniquifyMaterials(self)
    def clone(self): return _openrk.Geometry_clone(self)
Geometry_swigregister = _openrk.Geometry_swigregister
Geometry_swigregister(Geometry)

class GeometryDiffusion(Geometry):
    __swig_setmethods__ = {}
    for _s in [Geometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryDiffusion, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryDiffusion, name)
    __repr__ = _swig_repr
    def __init__(self, width=1.0, height=1.0, depth=1.0): 
        this = _openrk.new_GeometryDiffusion(width, height, depth)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openrk.delete_GeometryDiffusion
    __del__ = lambda self : None;
    def setShapeMeshDimensions(self, num_x=1, num_y=1, num_z=1): return _openrk.GeometryDiffusion_setShapeMeshDimensions(self, num_x, num_y, num_z)
    def getNumXShape(self): return _openrk.GeometryDiffusion_getNumXShape(self)
    def getNumYShape(self): return _openrk.GeometryDiffusion_getNumYShape(self)
    def getNumZShape(self): return _openrk.GeometryDiffusion_getNumZShape(self)
    def getNeighborShapeCell(self, *args, **kwargs): return _openrk.GeometryDiffusion_getNeighborShapeCell(self, *args, **kwargs)
    def uniformRefine(self, *args, **kwargs): return _openrk.GeometryDiffusion_uniformRefine(self, *args, **kwargs)
    def clone(self): return _openrk.GeometryDiffusion_clone(self)
    def generateCellMap(self): return _openrk.GeometryDiffusion_generateCellMap(self)
GeometryDiffusion_swigregister = _openrk.GeometryDiffusion_swigregister
GeometryDiffusion_swigregister(GeometryDiffusion)

# This file is compatible with both classic and new-style classes.


